[
["index.html", "데이터 과학 민주화 기계와의 경쟁1", " 데이터 과학 민주화 이광춘 - R Meetup 운영 2018-02-10 기계와의 경쟁1 2014년부터 xwMOOC 프로젝트를 진행하면서 소프트웨어 카펜트리(Software Carpentry) 와 데이터 카펜트리(Data Carpentry) 비영리 공공 프로젝트가 많은 영감을 주었다. 그러던 와중에 2018년부터 소프트웨어 교육 이 초중등 교육과정에 의무화되었고, 알파고가 이세돌을 이긴 알파고 쇼크 가 한국사회에 엄청난 파장을 일으켰다. 그와 더불어 청년, 중장년, 노년 할 것 없이 실업률이 사회적 문제로 대두되면서 기계가 인간의 직업을 빼앗아가는 주범으로 주목되고 있는 한편, 인공지능 기술을 밑에 깔고 있는 다양한 제품과 서비스가 쏟아지면서 우리의 삶을 그 어느 때보다 풍요롭게 만들고 있다. 컴퓨팅 사고력, 데이터 과학, 인공지능, 로봇/기계를 이해하는 사람과 그렇지 못한 사람간에 삶의 질 차이는 점점더 현격히 벌어질 것이다. 지금이라도 늦지 않았다. 늦었다는 것을 알아차렸을 때가 가장 빠른 시점이다. 유발 하라리 교수가 지적했듯이 데이터가 권력과 부의 원천이 되는 세상으로 접어들었는데 이에 대해서 컴퓨터와 적절하게 의사소통할 수 있는 언어가 필요하다. R는 일반인에게 많이 알려져 있지 않지만, 파이썬과 더불어 데이터 프로그래밍에 있어 유구한 역사와 탄탄한 사용자 기반을 가지고 최근들어 혁신적인 변화를 이끌고 있는 언어 중의 하나다. “The future is here, it’s just not evenly distributed yet.”                      - William Gibson “고대에는 ’땅’이 가장 중요했고 땅이 소수에게 집중되자 인간은 귀족과 평민으로 구분됐으며, 근대에는 ’기계’가 중요해지면서 기계가 소수에게 집중되자 인간은 자본가와 노동자 계급으로 구분됐다”. 이제는 데이터가 또 한번 인류를 구분하는 기준이 될 것이다. 향후 데이터가 소수에게 집중되면 단순 계급에 그치는 게 아니라 데이터를 가진 종과 그렇지 못한 종으로 분류될 것이이다.2                      - 유발 하라리(Yuval Noah Harari) ‘사피엔스’ 저자 유발 하라리 “인간을 해킹하는 시대가 온다”, “머신러닝·AI·생물학 발전…뇌과학 이해도 한층 높여”↩ ‘사피엔스’ 저자 유발 하라리 “인간을 해킹하는 시대가 온다”, “머신러닝·AI·생물학 발전…뇌과학 이해도 한층 높여”↩ "],
["r-intro.html", "Chapter 1 왜 프로그래밍을 배워야 하는가? 1.1 창의성과 동기 1.2 컴퓨터 하드웨어 아키텍처 1.3 프로그래밍 이해하기 1.4 단어와 문장 1.5 R과 대화하기 1.6 전문용어: 인터프리터와 컴파일러 1.7 프로그램 작성하기 1.8 프로그램이란 무엇인가? 1.9 프로그램 구성요소 1.10 프로그램이 잘못되면? 1.11 학습으로의 여정 1.12 용어사전 1.13 연습문제", " Chapter 1 왜 프로그래밍을 배워야 하는가? 컴퓨터 프로그램을 만드는 행위(프로그래밍)는 매우 창의적이며 향후 뿌린 것 이상으로 얻을 것이 많다. 프로그램을 만드는 이유는 어려운 자료분석 문제를 해결하려는 것에서부터 다른사람의 문제를 해결해주는데 재미를 느끼는 것까지 다양한 이유가 있다. 이 책을 통해서 모든 사람이 어떻게 프로그램을 만드는지를 알고, 프로그램이 어떻게 만드는지를 알게 되면, 새로 습득한 프로그래밍 기술로 하고자 하는 것을 해결할 수 있게 된다. 우리의 일상은 노트북에서부터 스마트폰까지 다양한 종류의 컴퓨터에 둘러싸여 있다. 이러한 컴퓨터를 우리를 위해서 많은 일을 대신해 주는 “개인비서”로 생각한다. 일상생활에서 접하는 컴퓨터 하드웨어는 우리에게 “다음에 무엇을 하면 좋겠습니까?” 라는 질문을 지속적으로 던지게 만들어 졌다. 프로그래머는 운영체제와 하드웨어에 응용 프로그램을 추가했고, 결국 많은 것들을 도와주는 개인 휴대 정보 단말(Persoanl Digital Assistant, PDA)로 진화했다. 최근에는 인공지능 기능이 탑재된 스마트폰(Smart Phone)이 그 역할을 대신하고 있다. 사용자 여러분이 컴퓨터에게 “다음 실행해 (do next)”를 컴퓨터가 이해할 수 있는 언어로 지시를 할 수만 있다면, 컴퓨터는 빠르고, 저장소가 커서, 매우 유용하게 사용될 수 있다. 만약 컴퓨터 언어를 알고 있다면, 반복적인 작업을 사람을 대신해서 컴퓨터에 지시할 수 있다. 흥미롭게도, 컴퓨터가 가장 잘 할 수 있는 종류의 작업들은 종종 사람들이 재미없고, 너무나 지루하다고 생각하는 것이다. 예를 들어, 이번 장의 첫 세 문단을 보고, 가장 많이 나오는 단어를 찾아보고 얼마나 자주 나오는지를 알려주세요. 사람이 몇초내에 단어를 읽고 이해할 수는 있지만, 그 단어가 몇번 나오는지 세는 것은 매우 고생스러운 작업이다. 왜냐하면 사람이 지루하고 반복되는 문제를 해결하는데 적합하지 않기 때문이다. 컴퓨터는 정반대이다. 논문이나 책에서 텍스트를 읽고 이해하는 것은 컴퓨터에게 어렵다. 하지만, 단어를 세고 가장 많이 사용되는 단어를 찾는 것은 컴퓨터에게는 무척이나 쉬운 작업이다. R words.R Enter file: words.txt to 16 우리의 개인 정보분석 도우미는 이번장의 첫 세 문단에서 단어 “to” 가 가장 많이 사용되었고, 16번 나왔다고 바로 답을 준다. 사람이 잘하지 못하는 점을 컴퓨터가 잘할 수 있다는 사실을 이해하면 왜 “컴퓨터 언어”로 컴퓨터와 대화해야 하는데 능숙해야하는지 알 수 있다. 컴퓨터와 대화할 수 있는 새로운 언어(R 혹은 파이썬)를 배우게 되면, 지루하고 반복되는 일을 컴퓨터가 처리하고, 사람에게 적합한 일을 하는데 더 많은 시간을 할애할 수 있다. 그래서, 여러분은 직관, 창의성, 창의력을 컴퓨터 파트너와 함께 추진할 수 있다. 1.1 창의성과 동기 이책은 직업으로 프로그래밍을 하는 사람을 위해서 저작된 것은 아니지만, 직업적으로 프로그램을 만드는 작업은 개인적으로나 경제적인면에서 꽤 매력적인 일이다. 특히, 유용하며, 심미적이고, 똑똑한 프로그램을 다른 사람이 사용할 수 있도록 만드는 것은 매우 창의적인 활동이다. 다양한 그룹의 프로그래머들이 사용자의 관심과 시선을 차지하기 위해서 경쟁적으로 작성한 다양한 종류의 프로그램이 여러분의 컴퓨터와 개인 휴대 정보 단말기(Personal Digital Assistant, PDA)에 담겨있다. 이렇게 개발된 프로그램은 사용자가 원하는 바를 충족시키고 훌륭한 사용자 경험을 제공하려고 노력한다. 몇몇 상황에서 사용자가 소프트웨어를 골라 구매하게 될 때, 고객의 선택에 대해 프로그래머는 바로 경제적 보상을 받게 된다. 만약 프로그램을 프로그래머 집단의 창의적인 결과물로 생각해본다면, 아마도 다음 그림이 좀더 의미 있는 PDA 컴퓨터 혹은 스마트폰으로 보일 것이다. 우선은 프로그래을 만드는 주된 동기가 사업을 한다던가 사용자를 기쁘게 한다기보다, 일상생활에서 맞닥뜨리는 자료와 정보를 잘 다뤄 좀더 생산적으로 우리의 삶을 만드는데 초점을 잡아본다. 프로그램을 만들기 시작할 때, 여러분 모두는 프로그래머이면서 동시에 자신이 만든 프로그램의 사용자가 된다. 프로그래머로서 기술을 습득하고 프로그래밍 자체가 좀더 창의적으로 느껴진다면, 여러분은 다른 사람을 위해 프로그램을 개발하게 준비가 된 것이다. 1.2 컴퓨터 하드웨어 아키텍처 소프트웨어 개발을 위해 컴퓨터에 지시 명령어를 전달하기 위한 컴퓨터 언어를 학습하기 전에, 컴퓨터가 어떻게 구성되어 있는지 이해할 필요가 있다. 컴퓨터 혹은 핸드폰을 분해해서 안쪽을 살펴보면, 다음과 같은 주요 부품을 확인할 수 있다. 주요 부품의 상위 수준 정의는 다음과 같다. 중앙처리장치(Central Processing Unit, CPU): 다음 무엇을 할까요? (“What is next?”) 명령어를 처리하는 컴퓨터의 주요 부분이다. 만약 컴퓨터 중앙처리장치가 3.0 GHz 라면, 초당 명령어 (다음 무엇을 할까요? What is next?)를 삼백만번 처리할 수 있다는 것이다. CPU 처리속도를 따라서 빠르게 컴퓨터와 어떻게 대화하는지 학습할 것이다. 주기억장치(Main Memory): 주기억장치는 중앙처리장치(CPU)가 급하게 명령어를 처리하기 하는데 필요한 정보를 저장하는 용도로 사용된다. 주기억장치는 중앙처리장치만큼이나 빠르다. 그러나 주기억장치에 저장된 정보는 컴퓨터가 꺼지면 자동으로 지워진다. 보조 기억장치(Secondary Memory): 정보를 저장하기 위해 사용되지만, 주기억장치보다 속도는 느리다. 전기가 나갔을 때도 정보를 기억하는 것은 장점이다. 휴대용 USB나 휴대용 MP3 플레이어에 사용되는 USB 플래쉬 메모리나 디스크 드라이브가 여기에 속한다. 입출력장치(Input Output Devices): 간단하게 화면, 키보드, 마우스, 마이크, 스피커, 터치패드가 포함된다. 컴퓨터와 사람이 상호작용하는 모든 방식이 포함된다. 네트워크(Network): 요즘 거의 모든 컴퓨터는 네트워크로 정보를 주고 받는 네트워크 연결(Network Connection) 하드웨어가 있다. 네트워크는 항상 “이용가능” 하지 않을지도 모르는 데이터를 저장하고 가져오는 매우 느린 저장소로 볼 수 있다. 그러한 점에서 네트워크는 좀더 느리고, 때때로 신뢰성이 떨어지는 보조 기억장치(Secondary Memory)의 한 형태로 볼 수 있다. 주요 부품들이 어떻게 작동하는지에 대한 세세한 사항은 컴퓨터 제조자에게 맡겨져 있지만, 프로그램을 작성할 때 컴퓨터 주요 부품에 대해서 언급되어서, 컴퓨터 전문용어를 습득하고 이해하는 것은 도움이 된다. 프로그래머로서 임무는 자료를 분석하고 문제를 해결하도록, 컴퓨터 자원 각각을 사용하고 조율하는 것이다. 프로그래머로서 대체로 CPU와 “대화”해서 다음 무엇을 실행하라고 지시한다. 때때로 CPU에 주기억장치, 보조기억장치, 네트워크, 혹은 입출력장치도 사용하라고 지시한다. 프로그래머는 컴퓨터의 “다음 무엇을 수행할까요?”에 대한 답을 하는 사람이기도 하다. 하지만, 컴퓨터에 답하기 위해서 5mm 크기로 프로그래머를 컴퓨터에 집어넣고 초당 30억개 명령어로 답을 하게 만드는 것은 매우 불편하다. 그래서, 대신에 미리 컴퓨터에게 수행할 명령문을 작성해야 한다. 이렇게 미리 작성된 명령문 집합을 프로그램(Program)이라고 하며, 명령어 집합을 작성하고 명령어 집합이 올바르게 작성될 수 있도록 하는 행위를 프로그래밍(Programming)이라고 부른다. 1.3 프로그래밍 이해하기 책의 나머지 장을 통해서 책을 읽고 있는 여러분을 프로그래밍 장인으로 인도할 것이다. 종국에는 책을 읽고 있는 여러분 모두 프로그래머가 될 것이다. 아마도 전문적인 프로그래머는 아닐지라도 적어도 자료/정보 분석 문제를 보고 그 문제를 해결할 수 있는 기술을 가지게는 될 것이다. 이런 점에서 프로그래머가 되기 위해서 두 가지 기술이 필요하다. 첫째, R 혹은 파이썬(Pythong)같은 프로그래밍 언어 - 어휘와 문법을 알 필요가 있다. 단어를 새로운 언어에 맞추어 작성할 수 있어야 하며 새로운 언어로 잘 표현된 “문장”으로 어떻게 작성하는지도 알아야 한다. 둘째, 스토리(Story)를 말 할 수 있어야 한다. 스토리를 작성할 때, 독자에게 아이디어(idea)를 전달하기 위해서 단어와 문장을 조합합니다. 스토리를 구성할 때 기술적인 면과 예술적인 면이 있는데, 기술적인 면은 쓰기 연습을 반복하고, 피트백을 받아 향상된다. 프로그래밍에서, 우리가 작성하는 프로그램은 “스토리”가 되고, 해결하려고 하는 문제는 “아이디어”에 해당된다. R 혹은 파이썬과 같은 프로그래밍 언어를 배우게 되면, 자바스크립트나 C++, 고(Go) 같은 두번째 언어를 배우는 것은 무척이나 쉽다. 새로운 프로그래밍 언어는 매우 다른 어휘와 문법을 갖지만, 문제를 해결하는 기술을 배우면, 다른 모든 프로그래밍 언어를 통해서 동일하게 접근할 수 있습니다. 파이썬 어휘와 문장은 매우 빠르게 학습할 수 있다. 새로운 종류의 문제를 풀기 위해 논리적인 프로그램을 작성하는 것은 더 오래 걸린다. 여러분은 작문을 배우듯이 프로그래밍을 배우게 된다. 프로그래밍을 읽고 설명하는 것으로 시작해서, 간단한 프로그램을 작성하고, 점차적으로 복잡한 프로그램을 작성할 것이다. 어느 순간에 명상에 잠기게 되고, 스스로 패턴이 눈에 들어오게 된다. 그러면, 좀더 자연스럽게 문제를 어떻게 받아들이고, 그 문제를 해결할 수 있는 프로그램을 작성하게 된다. 마지막으로, 그 순간에 도착하게 되면, 프로그래밍은 매우 즐겁고 창의적인 과정이 된다. 파이썬 프로그램의 어휘와 구조로 시작한다. 간단한 예제가 처음으로 언제 프로그램을 읽기 시작했는지를 상기시켜주니 인내심을 가지세요. 1.4 단어와 문장 사람 언어와 달리, R 어휘는 사실 매우 적다. R 어휘를 예약어(researved words)로 부른다. 이들 단어는 R에 매우 특별한 의미를 부여한다. R 프로그램 관점에서 R이 이들 단어를 보게 되면, R에게는 단 하나의 유일한 의미를 갖는다. 나중에 여러분들이 프로그램을 작성할 때, 자신만의 단어를 작성하는데 이를 변수(Variable)라고 한다. 변수 이름을 지을 때 폭넓은 자유를 갖지만, 변수 이름으로 파이썬 예약어를 사용할 수는 없다. 이런 점에서 강아지를 훈련시킬 때 “걸어(walk)”, “앉아”, “기달려”, “가져와” 같은 특별한 어휘를 사용한다. 강아지에게 이와 같은 특별한 예약어를 사용하지 않을 때는, 주인이 특별한 어휘를 사용할 때까지 강아지는 주인을 물끄러미 쳐다보기만 한다. 예를 들어, “더 많은 사람들의 건강을 전반적으로 향상하는 방향으로 동참하여”걷기(walk)“를 원한다”고 말하면, 강아지가 듣는 것은 “뭐라 뭐라 뭐라 걷기(walk) 뭐라”와 같이 들릴 것이다. 왜냐하면 “걸어(walk)”가 강아지 언어에는 예약어3이기 때문이다. 이러한 사실이 아마도 개와 고양이사이에는 어떠한 예약어도 존재하지 않는다는 것을 의미할지 모른다. 사람이 R과 대화하는 언어 예약어는 다음과 같다. R 콘솔에서 ? researved 명령어를 입력하면 자세한 내용을 파악할 수 있다. 파이썬과 비교해도 상대적으로 데이터 분석에 집중된 것을 예약어만을 통해서도 쉽게 파악된다. R 예약어 설명 If, else, repeat, while, function, for, in, next, break 조건, 함수, 반복문에 사용 TRUE, FALSE 논리 상수(Logical constants) NULL 정의되지 않는 값 혹은 값이 없음을 표현 Inf 무한(Infinity) NaN 숫자가 아님(Not a Number) NA 결측값, 값이 없음 (Not Available) NA_integer_, NA_real_, NA_complex_, NA_character_ 결측값 처리하는 상수 … 함수가 다른 함수에 인자를 전달하도록 지원 강아지 사례와 사뭇 다르게 R은 이미 완벽하게 훈련이 되어 있다. 여러분이 “try” 라고 말하면, 매번 “try” 라고 말할 때마다 실패 없이 R은 항시 정확히 시도한다. 상기 예약어를 학습하고, 어떻게 잘 사용되는지도 함께 학습할 것이지만, 지금은 파이썬에 말하는 것에 집중할 것이다. R과 대화하는 것 중 좋은 점은 다음과 같이 괄호내부에 인용부호로 감싸 메세지를 던지는 것만으로도 R에 말을 할 수 있다는 것이다. print(&quot;헬로 월드!&quot;) ## [1] &quot;헬로 월드!&quot; 상기 간단한 문장은 R 구문(Syntax)론적으로도 완벽하다. 상기 문장은 예약어 ’print’로 시작해서 출력하고자 하는 문자열을 괄호내부에 작은 따옴표로 감싸서 올바르게 R에게 전달했다. 1.5 R과 대화하기 R로 우리가 알고 있는 단어를 가지고 간단한 문장을 만들었으니 이제부터는 새로운 언어 기술을 시험하기 위해서 파이썬과 대화를 어떻게 시작하는지 알 필요가 있다. R과 대화를 시작하기 전에, R 소프트웨어를 컴퓨터에 설치하고 R을 컴퓨터에서 어떻게 실행하는지를 학습해야 한다. 이번 장에서 다루기에는 너무 구체적이고 자세한 사항이기 때문에 http://statkclee.github.io/data-science/을 참조하는 것을 권한다. 윈도우와 리눅스, 매킨토쉬 시스템 상에서 설치하고 실행하는 방법을 자세한 설치절차와 함께 화면을 캡쳐하여 다양한 환경에서 설명해 놨다. 설치가 마무리되고 터미널이나 윈도우 명령어 실행창에서 R을 타이핑 하게 되면, R 인터프리터가 인터랙티브 모드로 실행을 시작하고 다음과 같은 것이 화면에 뿌려진다. R version 3.4.2 (2017-09-28) -- &quot;Short Summer&quot; Copyright (C) 2017 The R Foundation for Statistical Computing Platform: x86_64-w64-mingw32/x64 (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type &#39;license()&#39; or &#39;licence()&#39; for distribution details. R is a collaborative project with many contributors. Type &#39;contributors()&#39; for more information and &#39;citation()&#39; on how to cite R or R packages in publications. Type &#39;demo()&#39; for some demos, &#39;help()&#39; for on-line help, or &#39;help.start()&#39; for an HTML browser interface to help. Type &#39;q()&#39; to quit R. &gt; R 인터프리터는 &gt; 프롬프트를 통해서 여러분에게 요청사항(“다음에 R이 무엇을 실행하기를 원합니까?”)을 접수받는 방식을 취한다. 이제 R은 여러분과 대화를 나눌 준비가 되었다. 이제 남은 것은 R 언어로 어떻게 말하고 어떻게 R과 대화하는지 아는 것이다. 예를 들어, 여러분이 가장 간단한 R 언어 단어나 문장 조차도 알 수가 없다고 가정하자. 우주 비행사가 저 멀리 떨어진 행성에 착륙해서 행성의 거주민과 대화를 시도할 때 사용하는 간단한 말을 사용해 보자. &gt; I come in peace, please take me to your leader Error: unexpected symbol in &quot;I come&quot; &gt; 잘 되는 것 같지 않다. 뭔가 빨리 다른 생각을 내지 않는다면, 행성 거주민은 여러분을 창으로 찌르고, 침으로 바르고, 불위 잘 구워 바베큐로 만들어 저녁으로 먹을 듯 하다. 운 좋게도 기나긴 우주 여행 중 이 책의 복사본을 가지고 와서 다음과 같이 빠르게 타이핑한다고 생각하자. print(&quot;헬로 월드!&quot;) ## [1] &quot;헬로 월드!&quot; 훨씬 좋아보인다. 이제 좀더 커뮤니케이션을 이어갈 수 있을 것으로 보인다. print(&#39;You must be the legendary god that comes from the sky&#39;) print(&#39;We have been waiting for you for a long time&#39;) print(&#39;Our legend says you will be very tasty with mustard&#39;) print(&#39;We will have a feast tonight unless you say) #&#39; 이번 대화는 잠시 동안 잘 진행되다가 여러분이 R 언어로 말하는데 정말 사소한 실수를 저질러 R이 다시 창을 여러분에게 겨눈다. 이 시점에 R은 놀랍도록 복잡하고 강력하며 R과 의사소통을 할 때 사용하는 구문(syntax)은 매우 까다롭다는 것은 알 수 있다. R은 다른 말로 안 똑똑(Intelligent)하다. 지금까지 여러분은 자신과 대화를 적절한 구문(syntax)을 사용해서 대화했다. 여러분이 다른 사람이 작성한 프로그램을 사용한다는 것은 R을 사용하는 다른 프로그래머가 R을 중간 매개체로 사용하여 대화한 것으로 볼 수 있다. 프로그램을 만든 저작자가 대화를 어떻게 진행되어져야 하는지를 표현하는 방식이다. 다음 몇 장에 걸쳐서 다른 많은 프로그래머 중의 한명처럼, R로 여러분이 작성한 프로그램을 이용하는 사용자와 대화하게 된다. R 인터프리터와 첫번째 대화를 끝내기 전에, R 행성의 거주자에게 “안녕히 계세요”를 말하는 적절한 방법도 알아야 한다. good-bye if you don not mind, I need to leave quit(&quot;yes&quot;) 상기 처음 두개 시도는 다른 오류 메세지를 출력한다. 두번째 오류는 다른데 이유는 if가 예약어이기 때문에 R은 이 예약어를 보고 뭔가 다른 것을 말한다고 생각하지만, 잠시 후 구문이 잘못됐다고 판정하고 오류를 뱉어낸다. R에 “안녕히 계세요”를 말하는 올바른 방식은 인터렉티브 &gt; 프롬프트에서 quit() 혹은 q()를 입력하는 것이다. 1.6 전문용어: 인터프리터와 컴파일러 R은 상대적으로 직접 사람이 읽고 쓸 수도 있고, 컴퓨터도 읽고 처리할 수 있도록 고안된 하이 레벨(High-level), 고수준 언어이다. 다른 하이 레벨 언어에는 자바, C++, PHP, 루비, 베이직, 펄, 자바스크립트 등 다수가 포함되어 있다. 실제 하드웨어 중앙처리장치(CPU)내에서는 하이레벨 언어를 조금도 이해하지 못한다. 중앙처리장치는 우리가 기계어(machine-language)로 부르는 언어만 이해한다. 기계어는 매우 간단하고 솔직히 작성하기에는 매우 귀찮다. 왜냐하면 모두 0과 1로만 표현되기 때문이다. 01010001110100100101010000001111 11100110000011101010010101101101 ... 표면적으로 0과 1로만 되어 있기 때문에 기계어가 간단해 보이지만, 구문은 매우 복잡하고 R보다 훨씬 어렵다. 그래서 매우 소수의 프로그래머만이 기계어로 작성할 수 있다. 대신에, 프로그래머가 파이썬과 자바스크립트 같은 하이 레벨 언어로 작성할 수 있게 다양한 번역기(translator)를 만들었다. 이러한 번역기는 프로그램을 중앙처리장치에 의해서 실제 실행이 가능한 기계어로 변환한다. 기계어는 특정 컴퓨터 하드웨어에 묶여있기 때문에 기계어는 다른 형식의 하드웨어에는 이식(portable)되지 않는다. 하이 레벨 언어로 작성된 프로그램은 두 가지 방식으로 이기종의 컴퓨터로 이식이 가능하다. 한 방법은 새로운 하드웨어에 맞게 기계어를 재컴파일(recompile)하는 것이고, 다른 방법은 새로운 하드웨어에 맞는 다른 인터프리터를 이용하는 것이다. 프로그래밍 언어 번역기는 일반적으로 두가지 범주가 있다. 인터프리터(Interpreter) 컴파일러(Compiler) 인터프리터는 프로그래머가 코드를 작성할 때 소스 코드를 읽고, 소스코드를 파싱하고, 즉석에서 명령을 해석한다. R은 인터프리터다. 따라서, R을 인터렉트브 모드로 실행할 때, R 명령문(한 문장)을 작성하면, R이 즉석에서 처리하고, 사용자가 다른 R 명령어를 입력하도록 준비를 한다. R 코드의 일부는 나중에 사용될 것이니 R에게 기억하도록 명령한다. 적당한 이름을 골라서 값을 기억시키고, 나중에 그 이름을 호출하여 값을 사용한다. 이러한 목적으로 저장된 값을 참조하는 목적으로 사용되는 표식(label)을 변수(variable)라고 한다. x &lt;- 6 x ## [1] 6 y &lt;- x * 7 y ## [1] 42 상기 예제에서 R이 값 6 을 기억하고 있다가, 라벨 x를 사용하여 나중에 값을 가져오게 만들었다. 파이썬의 경우 print 예약어를 사용하여 파이썬이 잘 기억하고 있는지를 검증한다. 하지만, R이 파이썬과 비교하여 차이가 나는 점은 인터랙티브 방식으로 데이터 분석에 장점을 갖고 있어 바로 변수명 혹은 다른 자료구조명(요인, 데이터프레임 등)을 입력하면 변수명에 들어 있는 내용을 즉각 파악가능하다. x를 가져와서 7을 곱하고 새로운 변수 y에 값을 집어 넣는다. 그리고 y에 현재 무슨 값이 저장되었는지 출력하라고 R에게 지시한다. 한줄 한줄 R에 명령어를 입력하고 있지만, 앞쪽 명령문에서 생성된 자료가 뒤쪽 실행 명령문에서 사용될 수 있도록 R은 순차적으로 정렬된 문장으로 처리한다. 방금전 논리적이고 의미있는 순서로 4줄 명령문을 간단하게 한 단락으로 작성했다. 위에서 본 것처럼 R과 인터랙티브하게 대화를 주고받는 것이 인터프리터의 본질이다. 컴파일러가 동작하기 위해서는 먼저 완전한 프로그램을 파일 하나에 담고, 하이 레벨 소스코드를 기계어로 번역하는 과정을 거치고, 마지막으로 나중에 실행되도록 변환된 기계어를 파일에 담는다. 윈도우를 사용한다면, 실행가능한 기계어 프로그램 확장자가 “.exe”(executable), 혹은 “.dll”(dynamically loadable library)임을 확인할 수 있다. 리눅스와 매킨토쉬에는 실행파일을 의미하는 특정 확장자는 없다. 텍스트 편집기에서 실행파일을 열게 되면, 다음과 같이 읽을 수 없는 좀 괴상한 출력결과를 화면상에서 확인한다. ^?ELF^A^A^A^@^@^@^@^@^@^@^@^@^B^@^C^@^A^@^@^@\\xa0\\x82 ^D^H4^@^@^@\\x90^]^@^@^@^@^@^@4^@ ^@^G^@(^@$^@!^@^F^@ ^@^@4^@^@^@4\\x80^D^H4\\x80^D^H\\xe0^@^@^@\\xe0^@^@^@^E ^@^@^@^D^@^@^@^C^@^@^@^T^A^@^@^T\\x81^D^H^T\\x81^D^H^S ^@^@^@^S^@^@^@^D^@^@^@^A^@^@^@^A\\^D^HQVhT\\x83^D^H\\xe8 .... 기계어를 읽고 쓰는 것은 쉽지 않다. 그래서 C 나 R, 파이썬 같은 하이 레벨 언어로 작성된 프로그램을 기계어로 자동 번역해주는 인터프리터와 컴파일러가 있다는 것은 멋진 일이다. 컴파일러와, 인터프리터를 논의하는 이 시점에, R 인터프리터 자체에 대해서 약간 궁금해야 한다. 무슨 언어로 작성되었을까? 컴파일된 언어로 작성되었을까? “R”을 타이핑하게 될 때, 정확하게 무슨 일이 일어나는걸까? R 인터프리터는 하이 레벨 언어 “C”로 작성되었다. R 인터프리터 실제 소스 코드를 보려면, https://www.r-project.org/ 웹사이트에 가서 여러분의 방식으로 개발할 수 있는 소스코드를 확인할 수 있다. 그래서, R 그 자체도 프로그램이다. 기계어로 컴파일되어 있어서 R을 여러분의 컴퓨터에 설치(혹은 컴퓨터 제조자가 설치를 대신 해주기도 함)한다는 것은 번역된 R 프로그램 기계어 코드 사본을 여러분 컴퓨터에 복사하는 것에 불과하다. 윈도우 시스템에서 R 실행가능한 기계어 코드는 파일에 다음과 같은 이름을 갖는다. C:\\Program Files\\R\\R-3.4.1\\bin\\R.exe 지금까지 살펴본 것은 R 프로그래머가 되기 위해서 정말 알 필요가 있는 것 이상이다. 하지만, 때때로 처음에 이런 귀찮은 질문에 바로 답하는 것이 나중에 보상을 충분히 하고도 남는다. 1.7 프로그램 작성하기 R 인터프리터에 명령어를 타이핑 하는 것은 R 주요 기능을 알아보는 좋은 방법이지만, 좀더 복잡한 문제를 해결하는데 권하지는 않는다. 프로그램을 작성할 때, 텍스트 편집기를 사용해서 스크립트(script)로 불리는 파일에 명령어 집합을 작성한다. 관례로, R 스크립트 확장자는 .R가 된다. 스크립트를 실행하기 위해서, R 인터프리터에 파일 이름을 넘겨준다. 유니스나 윈도우 명령창에서 R hello.R 를 입력하게 되면 다음과 같은 결과를 얻는다. $ cat hello.R print(&quot;헬로 월드!&quot;) $ R hello.R &quot;헬로 월드!&quot; $ “$”은 운영시스템 명령어 프롬프트이고, “R hello.R”는 문자열을 출력하는 한줄 R 프로그램을 담고 있는 “hello.R” 파일을 화면에 출력하라는 명령어입니다. 인터랙트브 모드에서 R 코드 입력하는 방식 대신에 R 인터프리터를 호출해서 “hello.R” 파일로부터 소스코드를 읽도록 지시합니다. 이 새로운 방식은 R 프로그램을 끝마치기 위해 quit()를 사용할 필요가 없다는 점에서 편리합니다. 파일에서 소스코드를 읽을 때, 파일 끝까지 읽게 되면 자동으로 R이 종료됩니다. 1.8 프로그램이란 무엇인가? 프로그램(Program)의 가장 본질적인 정의는 특정 작업을 수행할 수 있도록 조작된 일련의 R 문장의 집합이다. 가장 간단한 hello.R 스크립트도 프로그램이다. 한줄의 프로그램이 특별히 유익하고 쓸모가 있는 것은 아니지만 엄격한 의미에서 R 프로그램이 맞다. 프로그램을 이해하는 가장 쉬운 방법은 프로그램이 해결하려고 만들어진 문제를 먼저 생각해보고 나서, 그 문제를 풀어가는 프로그램을 살펴보는 것이다. 예를 들어, 페이스북에 게시된 일련의 글에서 가장 자주 사용된 단어에 관심을 가지고 소셜 컴퓨팅 연구를 한다고 생각해 봅시다. 페이스북에 게시된 글들을 쭉 출력해서 가장 흔한 단어를 찾으려고 열심히 들여다 볼 것이지만, 매우 오래 걸리고 실수하기도 쉽다. 하지만 R 프로그램을 작성해서 빨리 정확하게 작업을 마무리한다면 똑똑하게 주말을 재미나게 보낼 수 있다. 예를 들어 자동차(car)와 광대(clown)에 관한 다음 텍스트에서, 가장 많이 나오는 단어가 무엇이며 몇번 나왔는지 세어보세요. the clown ran after the car and the car ran into the tent and the tent fell down on the clown and the car 그리고 나서, 몇 백만줄의 텍스트를 보고서 동일한 일을 한다고 상상해 보자. 솔직히 수작업으로 단어를 세는 것보다 R을 배워 프로그램을 작성하는 것이 훨씬 빠를 것이다. 더 좋은 소식은 이미 텍스트 파일에서 가장 자주 나오는 단어를 찾아내는 간단한 프로그램을 개발했다. 저자가 직접 작성했고, 시험까지 했다. 바로 사용을 할 수 있도록 준비했기 때문에 여러분의 수고도 덜 수 있다. # 0. 환경설정 ------ library(tidyverse) library(stringr) text_dat &lt;- readLines(&quot;data/ch01-text.txt&quot;) split_word &lt;- str_split(text_dat, &quot; &quot;) uniq_word &lt;- unique(split_word) res_v &lt;- vector(&quot;integer&quot;, length(uniq_word)) for(i in seq_along(uniq_word)) { for(j in seq_along(split_word)) { if(uniq_word[i] == split_word[j]) { res_v[i] &lt;- res_v[i] + 1 } } } bind_cols(&quot;word&quot; = uniq_word, &quot;freq&quot;=res_v) %&gt;% arrange(desc(freq)) # 검증 ----- text_v &lt;- &quot;the clown ran after the car and the car ran into the tent and the tent fell down on the clown and the car&quot; split_word &lt;- str_split(text_v, &quot; &quot;) %&gt;% unlist table(split_word) %&gt;% sort(decreasing=TRUE) 상기 프로그램을 사용하려고 R을 공부할 필요도 없다. 10장에 걸쳐서 멋진 R 프로그램을 만드는 방법을 배우게 될 것이다. 지금 여러분은 단순 사용자로서 단순히 상기 프로그램을 사용하게 되면, 프로그램의 영리함과 동시에 얼마나 많은 수작업 노력을 줄일 수 있는지 감탄할 것이다. 단순하게 코드를 타이핑해서 words.R 파일로 저장하고 실행을 하거나, https://github.com/statkclee/r4inf/에서 소스 코드를 다운받아 실행하면 된다. R 언어가 어떻게 여러분(사용자)과 저자(프로그래머)사이에서 중개자 역할을 훌륭히 수행하고 있는지를 보여주는 좋은 사례다. 컴퓨터에 R을 설치한 누구나 사용할 수 있는 공통의 언어로 유용한 명령 순서(즉, 프로그램)를 우리가 주고받을 수 있는 방식이 R 방식이다. 그래서 누구도 R과 직접 의사소통하지 않고 R을 통해서 서로 의사소통한다. 1.9 프로그램 구성요소 다음 몇장에 걸쳐서 R 어휘, 문장구조, 문단구조, 스토리 구조에 대해서 학습할 것이다. R의 강력한 역량에 대해서 배울 것이고, 유용한 프로그램을 작성하기 위해서 R의 역량을 어떻게 조합할지도 학습할 것이다. 프로그램을 작성하기 위해서 사용하는 개념적인 하위 레벨(low-level) 패턴이 몇 가지 있다. R 프로그램을 위해서 만들어졌다기 보다는 기계어부터 하이 레벨(high-level) 언어에 이르기까지 모든 언어에도 공통된 사항이기도 하다. 입력: 컴퓨터 바깥 세계에서 데이터를 가져온다. 파일로부터 데이터를 읽을 수도 있고, 마이크나 GPS 같은 센서에서 데이터를 입력받을 수도 있다. 상기 초기 프로그램에서 입력값은 키보드를 사용하여 사용자가 데이터를 입력한 것이다. 출력: 화면에 프로그램 결과값을 출력주거나 파일에 저장한다. 혹은 음악을 연주하거나 텍스트를 읽어 스피커 같은 장치에 데이터를 내보낸다. 순차 실행: 스크립트에 작성된 순서에 맞춰 한줄 한줄 실행된다. 조건 실행: 조건을 확인하고 명령문을 실행하거나 건너뛴다. 반복 실행: 반복적으로 명령문을 실행한다. 대체로 반복 실행시 변화를 수반한다. 재사용: 한벌의 명령문을 작성하여 이름을 부여하고 저장한다. 필요에 따라 프로그램 이름을 불러 몇번이고 재사용한다. 너무나 간단하게 들리지만, 전혀 간단하지는 않다. 단순히 걸음을 “한 다리를 다른 다리 앞에 놓으세요” 라고 말하는 것 같다. 프로그램을 작성하는 “예술”은 기본 요소를 조합하고 엮어 사용자에게 유용한 무언가를 만드는 것이다. 단어를 세는 프로그램은 상기 프로그램의 기본요소를 하나만 빼고 모두 사용하여 작성되었다. 1.10 프로그램이 잘못되면? 처음 R과 대화에서 살펴봤듯이, R 코드를 명확하게 작성해서 의사소통 해야 한다. 작은 차이 혹은 실수는 여러분이 작성한 프로그램을 R이 들여다보다 조기에 포기하게 만든다. 초보 R 프로그래머는 R이 오류에 대해서는 인정사정 보지 않는다고 생각한다. R이 모든 사람을 좋아하는 것 같지만, R은 개인적으로만 사람들을 알고, 분노를 간직하고 있다. 이러한 사실로 인해서 R은 여러분이 완벽하게 작성된 프로그램을 받아서 “잘 맞지 않는군요”라고 거절하여 고통을 준다. primt(&quot;안녕 세상!&quot;) primt(&quot;안녕 세상!&quot;) 나는 R이 싫어! 밖으로 나오면, 가르쳐 줄께!!! R과 다퉈봐야 얻을 것은 없어요. R은 도구고 감정이 없다. 여러분이 필요로 할 때마다 여러분에게 봉사하고 기쁨을 주기 위해서 존재할 뿐이다. 오류 메세지가 심하게 들릴지는 모르지만 단지 R이 도와달라는 요청일 뿐이다. 입력한 것을 쭉 읽어 보고 여러분이 입력한 것을 이해할 수 없다고만 말할 뿐이다. R은 어떤 면에서 강아지와 닮았다. 맹목적으로 여러분을 사랑하고, 강아지와 마찬가지로 몇몇 단어만 이해하며, 웃는 표정(&gt; 명령 프롬프트)으로 여러분이 R이 이해하는 무언가를 말하기만을 기다린다. R이 “Error: object ‘나는’ not found”을 뱉어낼 때는, 마치 강아지가 꼬리를 흔들면서 “뭔가 말씀하시는 것 같은데요… 주인님 말씀을 이해하지 못하겠어요, 다시 말씀해 주세요 (&gt;)” 말하는 것과 같다. 여러분이 작성한 프로그램이 점점 유용해지고 복잡해짐에 따라 3가지 유형의 오류와 마주친다. 구문 오류(Syntax Error): 첫번째 마주치는 오류로 고치기 가장 쉽습니다. 구문 오류는 R 문법에 맞지 않는다는 것을 의미한다. R은 구문오류가 발생한 줄을 찾아 정확한 위치를 알려준다. 하지만, R이 제시하는 오류가 그 이전 프로그램 부문에서 발생했을 수도 있기 때문에 R이 제시하는 곳 뿐만 아니라 그 앞쪽도 살펴볼 필요가 있다. 따라서 구문 오류로 R이 지칭하는 행과 문자는 오류를 고치기 위한 시작점으로 의미가 있다. 논리 오류(Logic Error): 논리 오류의 경우 프로그램 구문은 완벽하지만 명령어 실행 순서에 실수가 있거나 혹은 문장이 서로 연관되는 방식에 오류가 있는 것이다. 논리 오류의 예를 들어보자. “물병에서 한모금 마시고, 가방에 넣고, 도서관으로 걸어가서, 물병을 닫는다” 의미론적 오류(Semantic Error): 의미론적 오류는 구문론적으로 완벽하고 올바른 순서로 프로그램의 명령문이 작성되었지만 단순하게 프로그램에 오류가 있다. 프로그램은 완벽하게 작동하지만 여러분이 의도한 바를 수행하지는 못한다. 간단한 예로 여러분이 식당으로 가는 방향을 알려주고 있다. &quot; … 주유소 사거리에 도착했을 때, 왼쪽으로 돌아 1.6km 쭉 가면 왼쪽편에 빨간색 빌딩에 식당이 있습니다.&quot; 친구가 매우 늦어 전화로 지금 농장에 있고 헛간으로 걸어가고 있는데 식당을 발견할 수 없다고 전화를 합니다. 그러면 여러분은 “주유소에서 왼쪽으로 혹은 오른쪽으로 돈거야?” 말하면, 그 친구는 “말한대로 완벽하게 따라서 갔고, 말한대로 필기까지 했는데, 왼쪽으로 돌아 1.6km 지점에 주요소가 있다고 했어”, 그러면 여러분은 “미안해, 내가 가지고 있는 건 구문론적으로는 완벽한데, 슬프게도 사소하지만 탐지되지 않은 의미론적 오류가 있네!” 라고 말할 것이다. 다시 한번 위 세 종류의 오류에 대해서, R은 단지 여러분이 요청한 것을 충실히 수행하기 위해서 최선을 다합니다. 1.11 학습으로의 여정 책을 읽어 가면서 처음에 개념들이 잘 와 닿지 않는다고 기죽을 필요는 없다. 말하는 것을 배울 때, 처음 몇년 동안 웅얼거리는 것은 문제도 아니다. 간단한 어휘에서 간단한 문장으로 옮겨가데 6개월이 걸리고, 문장에서 문단으로 옮겨가는데 5-6년 이상 걸려도 괜찮다. 흥미로운 완전한 짧은 스토리를 자신의 언어로 작성하는데 몇 년이 걸린다. R을 빨리 배울 수 있도록 다음 몇장에 걸쳐서 모든 정보를 제공한다. 하지만 새로운 언어를 습득하는 것과 마찬가지로 자연스럽게 느껴지기까지 R을 흡수하고 이해하기까지 시간이 걸린다. 큰 그림(Big Picture)을 이루는 작은 조각들을 정의하는 동안에, 큰 그림을 볼 수 있도록 여러 주제를 방문하고, 또 다시 재방문하면서 혼란이 생길 수도 있다. 이 책은 순차 선형적으로 쓰여져서 본 과정을 선형적으로 배워갈 수도 있지만, 비선형적으로 본 교재를 활용하는 것도 괜찮다. 가볍게 앞쪽과 뒷쪽을 넘나들며 책을 읽을 수도 있다. 구체적이고 세세한 점을 완벽하게 이해하지 않고 고급 과정을 가볍게 읽으면서 프로그래밍의 “왜(Why)”에 대해서 더 잘 이해할 수도 있다. 앞에서 배운 것을 다시 리뷰하고 연습문제를 다시 풀면서 지금 난공불락이라 여겼던 어려운 주제를 통해서 사실 더 많은 것을 학습했다는 것을 깨달을 것이다. 대체적으로 처음 프로그래밍 언어를 배울 때는, 마치 망치로 돌을 내리치고, 끌로 깎아내고 하면서 아름다운 조각품을 만들면서 겪게되는 것과 유사한 몇 번의 &quot; 유레카, 아 하&quot; 순간이 있다. 만약 어떤 것이 특별히 힘들다면, 밤새도록 앉아서 노력하는 것은 별로 의미가 없다. 잠시 쉬고, 낮잠을 자고, 간식을 먹고 다른 사람이나 강아지에게 문제를 설명하고 자문을 구한 후에 깨끗한 정신과 눈으로 돌아와서 다시 시도해보라. 단언컨데 이 책에 있는 프로그래밍 개념을 깨우치게 되면, 돌이켜 생각해보면 프로그래밍은 정말 쉽고 멋지다는 것을 알게 될 것이다. 그래서 단순하게 프로그래밍 언어는 정말 시간을 들여서 배울 가치가 있다. 1.12 용어사전 버그(bug): 프로그램 오류 중앙처리장치(central processing unit, CPU): 컴퓨터의 심장, 작성한 프로그램을 실행하는 장치, “CPU” 혹은 프로세서라고 부른다. 컴파일(compile): 나중에 실행을 위해서 하이레벨 언어로 작성된 프로그램을 로우레벨 언어로 번역한다. 하이레벨 언어(high-level language): 사람이 읽고 쓰기 쉽게 설계된 파이썬과 같은 프로그래밍 언어 인터랙티브 모드(interactive mode): 프롬프트에서 명령어나 표현식을 타이핑함으로써 파이썬 인터프리터를 사용하는 방식 해석한다(interpret): 하이레벨 언어로 작성된 프로그램을 한번에 한줄씩 번역해서 실행한다. 로우레벨 언어(low-level language): 컴퓨터가 실행하기 좋게 설계된 프로그래밍 언어, “기계어 코드”, “어셈블리 언어”로 불린다. 기계어 코드(machine code): 중앙처리장치에 의해서 바로 실행될 수 있는 가장 낮은 수준의 언어로 된 소프트웨어 주기억장치(main memory): 프로그램과 데이터를 저장한다. 전기가 나가게 되면 주기억장치에 저장된 정보는 사라진다. 파싱(parsing): 프로그램을 검사하고 구문론적 구조를 분석한다. 이식성(portability): 하나 이상의 컴퓨터에서 실행될 수 있는 프로그램의 특성 출력문(print statement): 파이썬 인터프리터가 화면에 값을 출력할 수 있게 만드는 명령문 문제해결(problem solving): 문제를 만들고, 답을 찾고, 답을 표현하는 과정 프로그램(program): 컴퓨테이션(Computation)을 명세하는 명령어 집합 프롬프트(prompt): 프로그램이 메세지를 출력하고 사용자가 프로그램에 입력하도록 잠시 멈춘 때. 보조 기억장치(secondary memory): 전기가 나갔을 때도 정보를 기억하고 프로그램을 저장하는 저장소. 일반적으로 주기억장치보다 속도가 느리다. USB의 플래쉬 메모리나 디스크 드라이브가 여기에 속한다. 의미론(semantics): 프로그램의 의미 의미론적 오류(semantic error): 프로그래머가 의도한 것과 다른 행동을 하는 프로그램 오류 소스 코드(source code): 하이레벨 언어로 기술된 프로그램 1.13 연습문제 컴퓨터 보조기억장치 기능은 무엇입니까? 프로그램의 모든 연산과 로직을 실행한다. 인터넷을 통해 웹페이지를 불러온다. 파워가 없을 때도 정보를 장시간 저장한다. 사용자로부터 입력정보를 받는다. 프로그램은 무엇입니까? 컴파일러와 인터프리터의 차이점을 설명하세요. 기계어 코드는 다음중 어는 것입니까? 파이썬 인터프리터 키보드 파이썬 소스코드 파일 워드 프로세싱 문서 다음 R 프로그램이 실행된 후에, 변수 “X”는 어디에 저장됩니까? 중앙처리장치 주메모리 보조메모리 입력장치 출력장치 사람의 어느 능력부위를 예제로 사용하여 다음 각각을 설명하세요. (1) 중앙처리장치, (2) 주메모리, (3) 보조메모리, (4) 입력장치, (5) 출력장치, 예를 들어 중앙처리장치에 상응하는 사람의 몸 부위는 어디입니까? 구문오류(“Syntax Error”)는 어떻게 고칩니까? 다음 코드에서 잘못된 점을 설명하세요. primt(&quot;헬로 월드!&quot;) Error in primt(&quot;헬로 월드!&quot;) : could not find function &quot;primt&quot; 다음 프로그램에서 출력되는 것은 무엇입니까? 43 44 x + 1 오류, 왜냐하면 x &lt;- x + 1 은 수학적으로 불가능하다. x &lt;- 43 x &lt;- x + 1 x Cat Proximity↩ "],
["r-var.html", "Chapter 2 변수, 표현식, 문장(Statement) 2.1 값(Value)과 자료형(Type) 2.2 변수(Variable) 2.3 변수명(Variable name)과 예약어(keywords) 2.4 문장(Statement) 2.5 연산자(Operator)와 피연산자(Operands) 2.6 표현식(Expression) 2.7 연산자 적용 우선순위 (Order of Operations) 2.8 나머지 연산자 (Modulus Operator) 2.9 문자열 연산자 (String Operator) 2.10 사용자에게서 입력값 받기 2.11 주석 2.12 연상되는 변수명 만들기 2.13 디버깅(Debugging) 2.14 용어 설명 2.15 연습문제", " Chapter 2 변수, 표현식, 문장(Statement) 2.1 값(Value)과 자료형(Type) 값(Value)은 문자와 숫자처럼 프로그램이 다루는 가장 기본이 되는 단위이다. 지금까지 살펴본 값은 1, 2 그리고 ’헬로 월드!’다. 상기 값은 다른 자료형(Type)에 속하는데, 2는 정수(integer), ‘헬로 월드!’ 는 문자열(String)에 속하는데, 문자(character)를 일련의 열(sequence)의 형태로 되어 있어서 문자열이라고 부른다. 인용부호에 감싸여 있어서, 여러분과 인터프리터는 문자열을 식별할 수 있다. print 문은 정수에도 사용할 수 있다. R 명령어를 실행하여 인터프리터를 구동시키자. print(7) ## [1] 7 값이 어떤 형인지 확신을 못한다면, 인터프리터가 알려준다. typeof(&quot;헬로 월드!&quot;) ## [1] &quot;character&quot; typeof(17) ## [1] &quot;double&quot; 다소 놀랄수도 있겠지만, 17은 부동소수점 숫자 형식 더블(double)이고 헬로 월드!는 문자(character)가 된다. typeof(7L) ## [1] &quot;integer&quot; 정수형을 필히 표현하려면 7L와 같이 정수 뒤에 L을 붙이면 된다. ‘17’, ‘3.2’ 같은 값은 어떨가? 숫자처럼 보이지만 문자열처럼 인용부호에 감싸여 있다. typeof(&#39;17L&#39;) ## [1] &quot;character&quot; typeof(&#39;3.2&#39;) ## [1] &quot;character&quot; ‘17’, ‘3.2’ 은 문자열이다. 1,000,000 처럼 아주 큰 정수를 입력할 때, 사람이 인식하기 편한 형태로 세자리 숫자마다 콤마(,)를 사용하고 싶을 것이다. 하지만, R에서는 오류가 난다. &gt; 1,000,000 Error: unexpected &#39;,&#39; in &quot;1,&quot; 파이썬의 경우 파이썬에서는 정상적으로 실행되나, 실행 결과는 우리가 기대했던 것이 아니다. 파이썬에서는 1,000,000 을 콤마(‘,’)로 구분된 정수로 인식한다. 따라서 사이 사이 공백을 넣어 출력했다. 이 사례가 여러분이 처음 경험하게 되는 의미론적 오류(semantic error)다. 코드가 에러 메세지 없이 실행이되지만, “올바른(right)” 작동을 하는 것은 아니다. 2.2 변수(Variable) 프로그래밍 언어의 가장 강력한 기능 중의 하나는 변수를 다룰 수 있는 능력이다. 변수(Variable)는 값을 참조하는 이름이다. 대입문(Assignment statement)는 새로운 변수를 생성하고 값을 변수에 대입한다. message &lt;- &quot;매월 세째주 수요일 R Meetup이 열립니다.&quot; n &lt;- 17L pi &lt;- 3.1415926535897931 상기 예제는 세가지 대입 사례를 보여준다. 첫 번째 대입 예제는 message 변수에 문자열을 대입한다. 두 번째 예제는 변수 n에 정수 17을 대입한다. 세 번째 예제는 pi변수에 근사값을 대입한다. 변수 값을 출력하기 위해서 print문을 사용하도 되지만, 일반적으로 변수명을 콘솔에서 타이핑하면 된다. print(message) ## [1] &quot;매월 세째주 수요일 R Meetup이 열립니다.&quot; n ## [1] 17 pi ## [1] 3.141593 변수 자료형(type)은 변수가 참조하는 값의 자료형이다. typeof(message) ## [1] &quot;character&quot; typeof(n) ## [1] &quot;integer&quot; typeof(pi) ## [1] &quot;double&quot; 2.3 변수명(Variable name)과 예약어(keywords) 대체로 프로그래머는 의미있는 변수명을 고른다. 프로그래머는 변수가 사용되는 것에 대해 문서화도 한다. 변수명은 임의로 길 수 있다. 변수명은 문자와 숫자를 포함할 수 있지만, 문자로 변수명을 시작해야 한다. 첫 변수명을 대문자로 사용해도 되지만 소문자로 변수명을 시작하는 것도 좋은 생각이다. (후에 왜 그런지 보게 될 것이다.) 변수명에 밑줄(underscore character, _)이 들어갈 수 있다. 종종 my_name 혹은 airspeed_of_unladen_swallow 처럼 밑줄은 여러 단어와 함께 사용된다. 변수명을 밑줄로 시작해서 작성할 수 있지만, 다른 사용자가 사용할 라이브러리를 작성하는 경우가 아니라면, 일반적으로 밑줄로 시작하는 변수명은 피한다. 한글을 변수명으로 사용하는 것도 가능하지만, 인코딩 등 여타 예기치 못한 문제가 생길 수도 있다는 점을 유념하고 사용한다. R이 다른 언어와 다른 점은 &lt;-을 변수명에 값을 대입하는데 사용하는 점이다. 이유는 R이 한창 개발될 당시 가장 최신 이론에 바탕을 두고 있기 때문이다. 수학적으로 variable_name = 123L와 같은 문장이 맞는지 곰곰히 생각해 보면 그 당시 &lt;- 기호를 사용한 이유를 유추할 수 있다. 변수명을 적합하게 작성하지 못하다면, 구문 오류가 발생한다. 76trombones &lt;- &#39;big parade&#39; more@ &lt;- 1000000 repeat &lt;- &#39;Advanced Theoretical Zymurgy&#39; 76trombones 변수명은 문자로 시작하지 않아서 적합하지 않다. more@은 특수 문자 (@)를 변수명에 포함해서 적합하지 않다. 하지만, repeat 변수명은 뭐가 잘못된 것일까? 구문 오류 이유는 repeat이 R의 예약어 중의 하나라고 밝혀졌다. 인터프리터가 예약어를 사용하여 프로그램 구조를 파악하기 위해서 사용하지만, 변수명으로는 사용할 수 없다. R 예약어 설명 If, else, repeat, while, function, for, in, next, break 조건, 함수, 반복문에 사용 TRUE, FALSE 논리 상수(Logical constants) NULL 정의되지 않는 값 혹은 값이 없음을 표현 Inf 무한(Infinity) NaN 숫자가 아님(Not a Number) NA 결측값, 값이 없음 (Not Available) NA_integer_, NA_real_, NA_complex_, NA_character_ 결측값 처리하는 상수 … 함수가 다른 함수에 인자를 전달하도록 지원 상기 예약어 목록을 주머니에 넣고 잘 가지고 다니고 싶을 것이다. 만약 인터프리터가 변수명 중 하나에 대해 불평을 하지만 이유를 모르는 경우, 예약어 목록에 변수명이 있는지 확인해 보세요. 2.4 문장(Statement) 문장(statement)은 R 인터프리터가 실행하는 코드 단위다. 지금까지 print, 대입(assignment, &lt;-) 두 종류의 문장을 살펴봤습니다. 인터랙트브 모드에서 문장을 입력하면, 인터프리터는 문장을 실행하고, 만약 출력할 것이 있다면 결과를 화면에 출력합니다. 스크립트는 보통 여러줄의 문장으로 구성됩니다. 하나 이상의 문장이 있다면, 문장이 순차적으로 실행되며서 결과가 한번에 하나씩 나타납니다. 예를 들어, 다음의 스크립트를 생각해 봅시다. 1 x &lt;- 2 x 상기 스크립트는 다음 결과를 출력합니다. ## [1] 1 ## [1] 2 대입 문장(x &lt;- 2)은 결과를 출력하지 않습니다. 2.5 연산자(Operator)와 피연산자(Operands) 연산자(Operators)는 덧셈, 곱셈 같은 계산(Computation)을 표현하는 특별한 기호입니다. 연산가자 적용되는 값을 피연산자(operands)라고 합니다. 다음의 예제에서 보듯이, +, -, *, /, ** 연산자는 덧셈, 뺄셈, 곱셈, 나눗셈, 지수승을 수행합니다. 20+32 hour-1 hour*60+minute minute/60 5**2 (5+9)*(15-7) 2.6 표현식(Expression) 표현식 (expression)은 값, 변수, 연산자 조합이다. 값은 자체로 표현식이고, 변수도 동일하다. 따라서 다음 표현식은 모두 적합하다. (변수 x는 사전에 어떤 값이 대입되었다고 가정한다.) 17 x x + 17 인터랙티브 모드에서 표현식을 입력하면, 인터프리터는 표현식을 평가(evaluate)하고 값을 표시한다. 1 + 1 ## [1] 2 하지만, 스크립트에서는 표현식 자체로 어떠한 것도 수행하지는 않는다. 초심자에게 혼란스러운 점이다. 연습문제. R 인터프리터에 다음 문장을 입력하고 결과를 보세요. 5 x &lt;- 5 x + 1 2.7 연산자 적용 우선순위 (Order of Operations) 1개 이상의 연산자가 표현식에 등장할 때, 연산자 평가 순서는 우선순위 규칙(rules of precedence)에 따른다. 수학 연산자에 대해서 파이썬은 수학적 관례를 동일하게 따른다. 영어 두문어 PEMDAS는 기억하기 좋은 방식이다. 괄호(Parentheses)는 가장 높은 순위를 가지고 여러분이 원하는 순위에 맞춰 실행할 때 사용한다. 괄호내의 식이 먼저 실행되기 때문에 2 * (3-1) 은 4가 정답이고, (1+1)**(5-2)는 8이다. 괄호를 사용하여 표현식을 좀더 읽기 쉽게 하려고 사용하기도 한다. (minute * 100) / 60 는 실행순서가 결과값에 영향을 주지 않지만 가독성이 상대적으로 더 좋다. 지수승(Exponentiation)이 다음으로 높은 우선순위를 가진다. 그래서 2**1+1는 4가 아니라 3이고, 3*1**3는 27이 아니고 3이다. 곱셈(Multiplication)과 나눗셈(Division)은 동일한 우선순위를 가지지만, 덧셈(Addition), 뺄셈(Substraction)보다 높은 우선 순위를 가진다. 덧셈과 뺄샘은 같은 실행 우선순위를 갖는다. 2*3-1는 4가 아니고 5이고, 6+4/2는 5가 아니라 8이다. 같은 실행 순위를 갖는 연산자는 왼쪽에서부터 오른쪽으로 실행된다. 5-3-1 표현식은 3이 아니고 1이다. 왜냐하면 5-3이 먼저 실행되고 나서 2에서 1을 빼기 때문이다. 여러분이 의도한 순서대로 연산이 수행될 수 있도록, 좀 의심스러운 경우는 항상 괄호를 사용한다. 2.8 나머지 연산자 (Modulus Operator) 나머지 연산자(modulus operator)는 정수에 사용하며, 첫번째 피연산자를 두번째 피연산자가 나눌 때 나머지 값이 생성된다. 파이썬에서 나머지 연산자는 퍼센트 기호(%)다. 구문은 다른 연산자와 동일하다. 7을 3으로 나누면 몫이 2가 되고 나머지가 1이 된다. 나머지 연산자가 놀랍도록 유용다다. 예를 들어 한 숫자를 다른 숫자로 나눌 수 있는지 없는지를 확인할 수도 있다. x %% y 값이 0 이라면, x를 y로 나눌 수 있다. 또한, 숫자에서 가장 오른쪽 숫자를 분리하는데도 사용된다. 예를 들어 x %% 10 은 x가 10진수인 경우 가장 오른쪽 숫자를 뽑아낼 수 있고, 동일한 방식으로 x %% 100은 가장 오른쪽 2개 숫자를 뽑아낼 수도 있다. 나눗셈 연산자의 경우 minute 값은 59, 보통 59를 60으로 나누면 0 대신에 0.98333 입니다. minute &lt;- 59 minute / 60 ## [1] 0.9833333 하지만, 몫을 minute %/% 60와 같이 계산하여 0 얻고, 나머지를 minute %% 60와 같이 계산하여 59을 얻게 된다. 2.9 문자열 연산자 (String Operator) + 연산자는 문자열는 동작하지 않는다. 대신에 문자열 끝과 끝을 붙이는 연결(concatenation) 작업을 수행할 때 paste() 함수를 사용한다. 예를 들어, first &lt;- 10 second &lt;- 15 first + second ## [1] 25 first &lt;- &#39;100&#39; second &lt;- &#39;150&#39; paste(first, second, sep=&quot;&quot;) ## [1] &quot;100150&quot; 상기 프로그램 출력은 100150 이다. 2.10 사용자에게서 입력값 받기 때때로 키보드를 통해서 사용자로부터 변수에 대한 값을 입력받고 싶을 때가 있다. 키보드로부터 입력값을 받는 readline() 이라는 내장(built-in) 함수를 R에서 제공한다. 입력 함수가 호출되면, R은 실행을 멈추고 사용자가 무언가 입력하기를 기다린다. 사용자가 Return (리턴) 혹은 Enter (엔터) 키를 누르게 되면 프로그램이 다시 실행되고, readline()은 사용자가 입력한 것을 문자열로 반환한다. input &lt;- readline() R Meetup 가즈아 input [1] &quot;R Meetup 가즈아&quot; 사용자로부터 입력 받기 전에 프롬프트에서 사용자가 어떤 값을 입력해야 하는지 정보를 제공하는 것도 좋은 생각이다. 입력을 받기 위해 잠시 멈춰있을 때, 사용자에게 표시되도록 readline() 함수에 문자열을 전달할 수 있다. input &lt;- readline(prompt=&quot;아무거나 입력하시요: &quot;) 아무거나 입력하시요: R Meetup 가즈아 input [1] &quot;R Meetup 가즈아&quot; 경우에 따라서 프롬프트의 끝에 \\n 을 넣는 경우도 있는데 개행(newline)을 의미한다. 개행은 줄을 바꾸게 하는 특수 문자다. 사용자 입력이 프롬프트 밑에 출력되도록 줄바꿈이 필요한 경우 사용한다. 만약 사용자가 정수를 입력하기를 바란다면, int()함수를 사용하여 반환되는 값을 정수(int)로 자료형을 변환한다. prompts &lt;- &#39;속도가 얼마나 됩니까? &#39; speed &lt;- readline(prompt=prompts) 속도가 얼마나 됩니까? 20 as.integer(speed) + 5 [1] 25 하지만, 사용자가 숫자 문자열이 아닌 다른 것을 입력하게 되면 오류가 발생한다. speed &lt;- readline(prompt=prompts) 속도가 얼마나 됩니까? 뭐라고 하셨나요!!! as.integer(speed) + 5 [1] NA 나중에 이런 종류의 오류를 어떻게 다루는지 배울 것이다. 2.11 주석 프로그램이 커지고 복잡해짐에 따라 가독성은 떨어진다. 형식 언어(formal language)는 촘촘하고 코드 일부분도 읽기 어렵고 무슨 역할을 왜 수행하는지 이해하기 어렵다. 이런 이유로 프로그램이 무엇을 하는지를 자연어로 프로그램에 노트를 달아두는 것은 좋은 생각이다. 이런 노트를 주석(Comments)이라고 하고 # 기호로 시작한다. # 경과한 시간을 퍼센트로 계산 percentage &lt;- (minute * 100) / 60 상기 사례의 경우, 주석 자체가 한줄이다. 주석을 프로그램의 맨 뒤에 놓을 수도 있다. percentage &lt;- (minute * 100) / 60 # 경과한 시간을 퍼센트로 계산 뒤의 모든 것은 무시되기 때문에 프로그램에는 아무런 영향이 없다. 명확하지 않은 코드의 기능을 문서화할 때 주석은 가장 유용하게 된다. 프로그램을 읽는 사람이 코드가 무엇을 하는지 이해한다고 가정하는 것은 일리가 있다. 왜 그런지를 이유를 설명하는 것은 더욱 유용하다. 다음의 주석은 코드와 중복되어 쓸모가 없다. v &lt;- 5 # 5를 v에 대입 다음의 주석은 코드에 없는 유용한 정보가 있다. v &lt;- 5 # 미터/초 단위로 측정된 속도 좋은 변수명은 주석을 할 필요를 없게 만들지만, 지나치게 긴 변수명은 읽기 어려운 복잡한 표현식이 될 수 있다. 그래서 상충관계(trade-off)가 존재한다. 2.12 연상되는 변수명 만들기 변수를 이름 짓는데 단순한 규칙을 지키고 예약어를 피하기만 하다면, 변수이름을 작명할 수 있는 무척이나 많은 경우의 수가 존재한다. 처음에 이렇게 넓은 선택폭이 오히려 프로그램을 읽는 사람이나 프로그램을 작성하는 사람 모두에게 혼란을 줄 수 있다. 예를 들어, 다음의 3개 프로그램은 각 프로그램이 달성하려하는 관점에서 동일하지만, 여러분이 읽고 이해하는데는 많은 차이점이 있다. a &lt;- 35.0 b &lt;- 12.50 c &lt;- a * b print(c) ## [1] 437.5 hours &lt;- 35.0 rate &lt;- 12.50 pay &lt;- hours * rate print(pay) ## [1] 437.5 x1q3z9ahd &lt;- 35.0 x1q3z9afd &lt;- 12.50 x1q3p9afd &lt;- x1q3z9ahd * x1q3z9afd print(x1q3p9afd) ## [1] 437.5 R 인터프리터는 상기 3개 프로그램을 정확하게 동일하게 바라보지만, 사람은 이들 프로그램을 매우 다르게 보고 이해한다. 사람은 가장 빨리 두 번째 프로그램의 의도를 알아차린다. 왜냐하면 각 변수에 무슨 데이터가 저장될지에 관해서, 프로그래머의 의도를 반영하는 변수명을 사용했기 때문이다. 현명하게 선택된 변수명을 연상기호 변수명(“mnemonic variable name”)이라고 한다. 연상되기 좋은 영어 단어 (“mnemonic”)은 기억을 돕는다는 뜻이다. 왜 변수를 생성했는지 기억하기 좋게 하기 위해서 연상하기 좋은 변수명을 선택한다. 매우 훌륭하게 들리고, 연상하기 좋은 변수명을 만드는게 좋은 아이디어 같지만, 기억하기 좋은 변수명은 초보 프로그래머가 코드를 파싱(parsing)하고 이해하는데 걸림돌이 되기도 한다. 왜냐하면 얼마되지 않는 예약어도 기억하지 못하고, 변수명이 때때로 너무 서술적이라 마치 일반적으로 사용하는 언어처럼 보이고 잘 선택된 변수명처럼 보이지 않기 때문이다. 어떤 데이터를 반복하는 다음 파이썬 코드를 살펴보자. 곧 반복 루프를 살펴보겠지만, 다음 코드가 무엇을 의미하는지 알기 위해서 퍼즐을 풀어보자. words &lt;- c(&quot;봄&quot;, &quot;여름&quot;, &quot;가을&quot;, &quot;겨울&quot;) for(word in seq_along(words)) { print(words[word]) } ## [1] &quot;봄&quot; ## [1] &quot;여름&quot; ## [1] &quot;가을&quot; ## [1] &quot;겨울&quot; 무엇이 일어나고 있는 것일까? for, word, in 등등 어느 토큰이 예약어일까? 변수명은 무엇일까? 파이썬은 기본적으로 단어의 개념을 이해할까? 초보 프로그래머는 어느 부분 코드가 이 예제와 동일해야만 하는지 그리고, 어느 부분 코드가 프로그래머 선택에 의한 것인지 분간하는데 고생을 한다. 다음의 코드는 위의 코드와 동일하다. for(slice in seq_along(pizza)) { print(pizza[slice]) } 초보 프로그래머가 이 코드를 보고 어떤 부분이 R 예약어이고 어느 부분이 프로그래머가 선택한 변수명인지 알기 쉽다. R이 피자와 피자조각에 대한 근본적인 이해가 없고, 피자는 하나 혹은 여러 조각으로 구성된다는 근본적인 사실을 알지 못한다는 것은 자명하다. 하지만, 작성한 프로그램이 데이터를 읽고 데이터에 있는 단어를 찾는다면 피자(pizza)와 피자조각(slice)은 연상하기 좋은 변수명이 아니다. 이것을 변수명으로 선핸하게 되면 프로그램의 의미를 왜곡시킬 수 있다. 좀 시간을 보낸 후에 가장 흔한 예약어에 대해서 알게 될 것이고, 이들 예약어가 어느 순간 여러분에게 눈에 띄게 될 것이다. for(word in seq_along(words)) { print(words[word]) } R에서 정의된 코드 일부분(for, in, print)은 예약어로 굵게 표시되어 있고, 프로그래머가 생성한 변수명(word, words)는 굵게 표시되어 있지 않다. 대다수 텍스트 편집기는 R 구문을 인지하고 있어서, R 예약어와 프로그래머가 작성한 변수를 구분하기 위해서 색깔을 다르게 표시한다. 잠시 후에 여러분은 R을 읽고 변수와 예약어를 빠르게 구분할 수 있을 것이다. 2.13 디버깅(Debugging) 이 지점에서 여러분이 저지르기 쉬운 구문 오류는 odd~job, US$ 같은 특수문자를 포함해서 잘못된 변수명을 생성하는 것과 repeat, while같은 예약어를 변수명으로 사용하는 것이다. 변수명에 공백을 넣는다면, 파이썬은 연산자 없는 두 개의 피연산자로 생각한다. bad name &lt;- 5 Error: unexpected symbol in &quot;bad name&quot; 구문 오류에 대해서, 오류 메세지는 그다지 도움이 되지 못한다. 가장 흔한 오류 메세지는 Error: unexpected symbol in &quot;bad name&quot;인데 둘다 그다지 오류에 대한 많은 정보를 주지는 못한다. 여러분이 많이 범하는 실행 오류는 정의 전에 사용(“use before def”)하는 것으로 변수에 값을 대입하기 전에 변수를 사용할 경우 발생한다. 여러분이 변수명을 잘못 쓸 때도 발생할 수 있다. principal &lt;- 327.68 interest &lt;- principle * rate Error: object &#39;principle&#39; not found 변수명은 대소문자를 구분한다. 그래서, LaTeX은\\(LaTeX\\), latex와 같지 않다. 이 지점에서 여러분이 범하기 쉬운 의미론적 오류는 연산자 우선 순위일 것이다. 예를 들어 \\(frac{1}{2\\pi}\\)를 계산하기 위해서 다음과 같이 프로그램을 작성하게 되면 … 1.0 / 2.0 * pi 나눗셈이 먼저 일어나서 이 되는데 의도한 것과 같지 않다. R으로 하여금 여러분이 작성한 의도를 알게할 수는 없다. 그래서 이런 경우 오류 메세지는 없지만, 여러분은 잘못된 답을 얻게 된다. 2.14 용어 설명 대입(assignment): 변수에 값을 대입하는 문장 연결(concatenate): 두 개의 피연산자 끝과 끝을 합치는 것 주석(comment): 다른 프로그래머나 소스코드를 읽는 다른 사람을 위한 프로그램 정보로 프로그램의 실행에는 아무런 영향이 없다. 평가(evaluate): 하나의 값을 만들도록 연산을 실행함으로써 표현식을 간단히 하는 것 표현식(expression): 하나의 결과값을 만드는 변수, 연산자, 값의 조합 부동 소수점(floating-point): 소수점을 가진 숫자를 표현하는 자료형 **버림 나눗셈(floor division)] 두 숫자를 나누어 소수점이하 부분을 절사하는 연산자 정수(integer): 완전수를 나타내는 자료형 예약어(keyword): 컴파일러가 프로그램을 파싱하는데 사용하기 위해서 이미 예약된 단어; if, def, while 같은 예약어를 변수명으로 사용할 수 없다. 연상기호(mnemonic): 기억 보조. 변수에 저장된 것을 기억하기데 도움이 되도록 변수에 연상되는 이름을 부여한다. 나머지 연산자(modulus operator): 퍼센트 기호 ()로 표시되고 정수를 가지고 한 숫자를 다른 숫자로 나누었을 때 나머지를 생성하는 연산자 피연산자(operand): 연산자가 연산을 수행하는 값중의 하나 연산자(operator): 덧셈, 곱셈, 문자열 결합 같은 간단한 연산을 표현하는 특별 기호 우선순위 규칙(rules of precedence): 다수의 연산자와 피연산자를 포함한 표현식이 평가되는 실행 순서를 규정한 규칙 집합 문장(statement): 명령이나 액션을 나타내는 코드 부문. 지금까지 assignment, print 문을 보았다. 문자열(string): 일련의 문자를 나타내는 형식 자료형(type): 값의 범주. 지금까지 여러분이 살펴본 자료형은 정수 (int), 부동 소수점수 (float), 문자열 (str) 이다. 값(value): 숫자나 문자 같은 프로그램이 다루는 데이터의 기본 단위중 하나 변수(variable): 값을 참조하는 이름 2.15 연습문제 readline()을 사용하여 사용자의 이름을 입력받고 환영하는 프로그램을 작성하세요. 이름을 입력하시오: 광춘 안녕하세요 광춘님 급여를 지불하기 위해서 사용자로부터 근로시간과 시간당 임금을 계산하는 프로그램을 작성하세요. 시간을 입력하시오: 35.51 시급을 입력하시오: 7530 알바비: 263550 지금은 급여가 정확하게 소수점 두자리까지 표현되지 않아도 된다. 만약 원하다면, R 내장 round() 함수를 사용하여 소수점 아래 반올림하여 정수로 작성할 수도 있다. 다음 대입 문장을 실행한다고 가정합시다. width &lt;- 17 height &lt;- 12.0 다음 표현식 각각에 대해서, 표현식의 값(value)과 (표현식 값의) 자료형(type)을 작성하세요. width/2 width/2.0 height/3 1 + 2 * 5 정답을 확인하기 위해서 R 인터프리터를 사용하세요. 사용자로부터 섭씨 온도를 입력받아 화씨온도로 변환하고, 변환된 온도를 출력하는 프로그램을 작성하세요. "],
["r-cont.html", "Chapter 3 조건부 실행 3.1 부울 표현식(Boolean expressions) 3.2 논리 연산자 3.3 조건문 실행 3.4 대안 실행 3.5 연쇄 조건문 3.6 중첩 조건문 3.7 try와 catch를 활용한 예외 처리 3.8 논리 연산식의 단락(Short circuit) 평가 3.9 디버깅(Debugging) 3.10 용어 정의 3.11 연습문제", " Chapter 3 조건부 실행 3.1 부울 표현식(Boolean expressions) 부울 표현식(boolean expression)은 참(TRUE) 혹은 거짓(FALSE)를 지닌 표현식이다. 다음 예제는 == 연산자를 사용하여 두 개 피연산자를 비교하여 값이 동일하면 참(TRUE), 그렇지 않으면 거짓(FALSE)을 산출한다. 5 == 5 ## [1] TRUE 5 == 6 ## [1] FALSE 참(TRUE)과 거짓(FALSE)은 논리형(logical) 자료형(type)에 속하는 특별한 값으로 문자열은 아니다. typeof(TRUE) ## [1] &quot;logical&quot; typeof(FALSE) ## [1] &quot;logical&quot; == 연산자는 비교 연산자(comparison operators) 중 하나이고, 다른 연산자는 다음과 같다. x != y # x는 y와 값이 같지 않다. x &gt; y # x는 y보다 크다. x &lt; y # x는 y보다 작다. x &gt;= y # x는 y보다 크거나 같다. x &lt;= y # x는 y보다 작거나 같다. x == y # x는 y와 같다. x != y # x는 y와 개체가 동일하지 않다. 상기 연산자가 친숙할지 모르지만, R 기호는 수학 기호와 다르다. 일반적인 오류로 비교를 해서 동일하다는 의미로 == 연산자 대신에 = 를 사용하는 것이다. R에서 대입연산자로 &lt;-을 사용하지만, = 으로 사용해도 프로그램은 돌아간다. = 연산자는 대입 연산자이고, == 연산자는 비교 연산자다. =&lt;, =&gt; 같은 비교 연산자는 R에는 없다. 3.2 논리 연산자 세개 논리 연산자(logical operators): &amp;, ||, ! 이 있다. 논리 연산자 의미는 수식기호 의미와 유사하다. 영어로 표현하면 &amp;은 and, ||은 or, !은 not이 된다. 예를 들어, x &gt; 0 &amp; x &lt; 10 x 가 0 보다 크다. 그리고(and), 10 보다 작으면 참이다. n % 2 == 0 or n % 3 == 0 은 두 조건문 중의 하나만 참이 되면, 즉, 숫자가 2 혹은(or) 3으로 나누어지면 참이다. 마지막으로 ! 연산자는 부울 연산 표현식을 부정한다. x &gt; y 가 거짓이면, ! (x &gt; y)은 참이다. 즉, x이 y 보다 작거나 같으면 참이다. 엄밀히 말해서, 논리 연산자의 두 피연산자는 모두 부울 표현식이지만, R에서 그다지 엄격하지는 않다. 0 이 아닌 임의의 숫자 모두 “참(TRUE)”으로 해석된다. 일반적으로 참(TRUE)이면 1, 그렇지 않는 경우 0으로 표현해서 사용한다. 17 &amp; TRUE ## [1] TRUE 이러한 유연함이 유용할 수 있으나, 혼란을 줄 수도 있으니 유의해서 사용해야 한다. 무슨 일을 하고 있는지 정확하게 알지 못한다면 피하는게 상책이다. 3.3 조건문 실행 유용한 프로그램을 작성하기 위해서 거의 항상 조건을 확인하고 조건에 따라 프로그램 실행을 바꿀 수 있어야 한다. 조건문(Conditional statements)은 그러한 능력을 부여한다. 가장 간단한 형태는 if 문이다. if (x &gt; 0) { print(&#39;x 는 양수&#39;) } if문 뒤에 불 표현식(boolean expression)을 조건(condition)이라고 한다. 만약 조건문이 참이면, 첫번째 괄호로 둘러싼 문장이 실행된다. 만약 조건문이 거짓이면, 첫번째 괄호로 둘러싼 문장의 실행을 건너뛴다. if문은 함수 정의, for 반복문과 동일한 구조를 가진다. if문은 (으로 시작되고, )으로 끝나는 헤더 머리부문과 괄호({, })로 둘러싼 몸통 블록(block)으로 구성된다. if문처럼 문장이 한 줄 이상에 걸쳐 작성되기 때문에 복합 문장(compound statements)이라고 한다. if문 몸통 부문에 작성되는 실행 문장 숫자에 제한은 없으나 최소한 한 줄은 있어야 한다. 때때로, 몸통 부문에 어떤 문장도 없는 경우가 있다. 아직 코드를 작성하지 않아서 자리만 잡아 놓는 경우로, 그냥 놔두면 된다. 즉, 아무것도 작성하지 않고 괄호 내부를 텅비워든다. 파이썬의 경우 아무것도 수행하지 않는 pass문을 넣어야 되는 것과 대비된다. if (x &gt; 0) { # 아무것도 작성하지 않고 자리만 잡아둔다. 나중에 코드를 채워넣는다. } if문을 R 인터프리터에서 타이핑하고 엔터를 치게 되면, 명령 프롬프트가 +로 바뀐다. 따라서 다음과 같이 if문 몸통 부분을 작성중에 있다는 것을 나타낸다. &gt; x &lt;- 3 &gt; &gt; if (x &lt; 10) { + print(&#39;작다&#39;) + } [1] &quot;작다&quot; 3.4 대안 실행 if문의 두 번째 형태는 대안 실행(alternative execution)이다. 대안 실행의 경우 두 가지 경우의 수가 존재하고, 조건이 어느 방향으로 실행할 것인지 결정한다. 구문(Syntax)은 아래와 같다. if (x %% 2 == 0){ print(&quot;x는 짝수&quot;) } else { print(&quot;x는 홀수&quot;) } x를 2로 나누었을 때, 0 이되면, x는 짝수이고, 프로그램은 짝수(“x는 짝수”)라는 결과 메시지를 출력한다. 만약 조건이 거짓이라면, 두 번째 몸통 부문 문장이 실행된다. 조건은 참 혹은 거짓이어서, 대안 중 하나만 정확하게 실행된다. 대안을 분기(Branch)라고도 하는데 이유는 실행 흐름이 분기되기 때문이다. 3.5 연쇄 조건문 때때로, 두 가지 이상의 경우의 수가 있으며, 두 가지 이상의 분기가 필요하다. 이와 같은 연산을 표현하는 방식이 연쇄 조건문(chained conditional)이다. if (x &lt; y){ print(&quot;x는 y보다 작다&quot;) } else if (x &gt; y) { print(&quot;x는 y보다 크다&quot;) } else { print(&quot;x와 y는 같다&quot;) } “else if”로 연쇄 조건문을 표현하는데 주목한다. 이번에도 단 한번의 분기만 실행된다. if else 문의 갯수에 제한은 없다. else 절이 있다면, 거기서 끝마쳐야 하지만, 연쇄 조건문에 필히 있어야 하는 것은 아니다. if (choice == &#39;a&#39;) { print(&quot;Bad guess&quot;) } else if(choice == &#39;b&#39;) { print(&quot;Good guess&quot;) } else if (choice == &#39;c&#39;) { print(&#39;Close, but not correct&#39;) } 각 조건은 순서대로 점검한다. 만약 첫 번째가 거짓이면, 다음을 점검하고 계속 점검해 나간다. 순서대로 진행 중에 하나의 조건이 참이면, 해당 분기가 수행되고, if문 전체는 종료된다. 설사 하나 이상의 조건이 참이라고 하더라도, 첫 번째 참 분기만 수행된다. 3.6 중첩 조건문 하나의 조건문이 조건문 내부에 중첩될 수 있다. 다음과 같이 삼분 예제를 작성할 수 있다. if (x &lt; y){ print(&quot;x는 y보다 작다&quot;) } else { if (x &gt; y) { print(&quot;x는 y보다 크다&quot;) } else { print(&quot;x와 y는 같다&quot;) } } 바깥 조건문에는 두 개의 분기가 있다. 첫 분기는 간단한 문장을 담고 있다. 두 번째 분기는 자체가 두 개의 분기를 가지고 있는 또 다른 if문을 담고 있다. 자체로 둘다 조건문이지만, 두 분기 모두 간단한 문장이다. 괄호를 사용하는 것이 구조를 명확히 하지만, 중첩 조건문의 경우 가독성이 급격히 저하된다. 일반적으로, 가능하면 중첩 조건문을 피하는 것을 권장한다. 논리 연산자를 사용하여 중첩 조건문을 간략히 할 수 있다. 예를 들어, 단일 조건문으로 가지고 앞의 코드를 다음과 같이 재작성할 수 있다. if (0 &lt; x) { if (x &lt; 10) { print(&#39;x는 한자리 양수.&#39;) } } print문은 두 개 조건문을 통과될 때만 실행돼서, &amp; 연산자와 동일한 효과를 거둘 수 있다. if (0 &lt; x &amp; x &lt; 10) { print(&quot;x는 한자리 양수.&quot;) } 3.7 try와 catch를 활용한 예외 처리 함수 readline()와 as.integer()을 사용하여 앞에서 사용자가 타이핑한 숫자를 읽어 정수로 파싱하는 프로그램 코드를 살펴보았다. 또한 이렇게 코딩하는 것이 얼마나 위험한 것인지도 살펴보았다. speed &lt;- readline(prompt=prompts) 속도가 얼마나 됩니까? 뭐라고 하셨나요!!! as.integer(speed) + 5 [1] NA R 인터프리터에서 상기 문장을 실행하면, 인터프리터에서 새로운 프롬프트로 되고, “이런(oops)” 잠시 후에, 다음 문장 실행으로 넘어간다. 하지만, 만약 코드가 R 스크립트로 실행이 되어 오류가 발생하면, 역추적해서 그 지점에서 즉시 멈추게 된다. 다음에 오는 문장은 실행하지 않는다. 화씨 온도를 섭씨 온도로 변환하는 간단한 프로그램이 있다. 다소 길이가 긴데, R 콘솔에서 실행하는 코드와 쉘에서 실행할 때 사용자 입력을 받는 것을 달리 처리하기 위함이다. 또한, 한글을 넣게 되면 오류가 발생하니, 프롬프트 메시지는 영어로 처리한다. # fahrenheit.R if ( interactive() ){ inp &lt;- readLines(prompt = &quot;Enter Fahrenheit Temperature: &quot;) fahr &lt;- as.numeric(inp) cel &lt;- (fahr - 32.0) * 5.0 / 9.0 print(cel) } else { cat(&quot;Enter Fahrenheit Temperature: &quot;) inp &lt;- readLines(&quot;stdin&quot;, n=1) fahr &lt;- as.numeric(inp) cel &lt;- (fahr - 32.0) * 5.0 / 9.0 print(cel) } 이 코드를 실행해서 적절하지 않은 입력값을 넣게 되면, 다소 불친절한 오류 메시지와 함께 간단히 작동을 멈춘다. D:\\docs\\r4inf\\code&gt; Rscript fahrenheit.R Enter Fahrenheit Temperature: 72 [1] 22.22222 D:\\docs\\r4inf\\code&gt; Rscript fahrenheit.R Enter Fahrenheit Temperature: fred [1] NA (): NA 이런 종류의 예측하거나, 예측하지 못한 오류를 다루기 위해서 R에는 “try / except”로 불리는 조건 실행 구조가 내장되어 있다. try와 except의 기본적인 생각은 일부 명령문에 문제가 있다는 것을 사전에 알고 있고, 만약 그 때문에 오류가 발생하게 된다면 대신 프로그램에 추가해서 명령문을 실행한다는 것이다. except 블록의 문장은 오류가 없다면 실행되지 않는다. 문장 실행에 대해서 R try, except 기능을 보험으로 생각할 수도 있다. 온도 변환기 프로그램을 다음과 같이 재작성한다. if ( interactive() ){ inp &lt;- readLines(prompt = &quot;Enter Fahrenheit Temperature: &quot;) fahr &lt;- as.numeric(inp) cel &lt;- (fahr - 32.0) * 5.0 / 9.0 print(cel) } else { cat(&quot;Enter Fahrenheit Temperature: &quot;) inp &lt;- readLines(&quot;stdin&quot;, n=1) tryCatch({ fahr &lt;- as.numeric(inp) cel &lt;- (fahr - 32.0) * 5.0 / 9.0 print(cel) }, error = function(err) print(paste(&quot;ERROR: &quot;, err)) ) } R은 tryCatch 블록 문장을 우선 실행한다. 만약 모든 것이 순조롭다면, error 블록을 건너뛰고, 다음 코드를 실행한다. 만약 tryCatch 블록에서 error가 발생하면, R은 tryCatch 블록에서 빠져 나와 error 문장을 수행한다. tryCatch문으로 예외사항을 다루는 것을 예외 처리한다(catching an exception)고 부른다. 예제에서 error 절에서는 단순히 오류 메시지를 출력만 한다. 대체로, 예외 처리를 통해서 오류를 고치거나, 재시작하거나, 최소한 프로그램이 정상적으로 종료될 수 있게 한다. 3.8 논리 연산식의 단락(Short circuit) 평가 x &gt;= 2 &amp; (x/y) &gt; 2 와 같은 논리 표현식을 R에서 처리할 때, 왼쪽에서부터 오른쪽으로 표현식을 평가한다. &amp; 정의 때문에 x 가 2보다 작다면, x &gt;= 2은 거짓(FALSE)으로, 전체적으로 (x/y) &gt; 2 이 참(TRUE) 혹은 거짓(FALSE) 이냐에 관계없이 거짓(FALSE)이 된다. 나머지 논리 표현식을 평가해도 나아지는 것이 없다고 R이 자동으로 탐지할 때, 평가를 멈추고 나머지 논리 표현식에 대한 연산도 중지한다. 최종값이 이미 결정되었기 때문에 더 이상의 논리 표현식의 평가가 멈출 때, 이를 단락(Short-circuiting) 평가라고 한다. 좋은 점처럼 보일 수 있지만, 단락 행동은 가디언 패턴(guardian pattern)으로 불리는 좀 더 똑똑한 기술로 연계된다. R 인터프리터의 다음 코드를 살펴보자. x &lt;- 6 y &lt;- 2 x &gt;= 2 &amp; (x/y) &gt; 2 ## [1] TRUE x &lt;- 1 y &lt;- 0 x &gt;= 2 &amp; (x/y) &gt; 2 ## [1] FALSE x &lt;- 6 y &lt;- 0 x &gt;= 2 &amp; (x/y) &gt; 2 ## [1] TRUE 세번째 연산은 일반적으로 실패하는데 이유는 (x/y) 연산을 평가할 때 y 가 0 이어서 실행오류가 발생된다. 하지만, R에서는 0으로 나누게 되면 Inf가 되어 계산결과는 참이 되어 전체적으로 참이 된다. 하지만, 두 번째 예제의 경우 거짓(FALSE)하지 않는데 이유는 x &gt;= 2 이 거짓(FALSE) 으로, 전체가 거짓(FALSE)이 되어 단락(Short-circuiting) 평가 규칙에 의해 (x/y) 평가는 실행되지 않게 된다. 평가 오류를 발생하기 전에 가디언(gardian) 평가식을 전략적으로 배치해서 논리 표현식을 다음과 같이 구성한다. x &lt;- 1 y &lt;- 0 x &gt;= 2 &amp; y != 0 &amp; (x/y) &gt; 2 ## [1] FALSE x &lt;- 6 y &lt;- 0 x &gt;= 2 &amp; y != 0 &amp; (x/y) &gt; 2 ## [1] FALSE x &gt;= 2 &amp; (x/y) &gt; 2 &amp; y != 0 ## [1] FALSE 첫 번째 논리 표현식은 x &gt;= 2 이 거짓(FALSE) 이라 &amp;에서 멈춘다. 두 번째 논리 표현식은 x &gt;= 2 이 참(TRUE), y != 0 은 거짓(FALSE) 이라 (x/y)까지 갈 필요가 없다. 세 번째 논리 표현식은 (x/y) 연산이 끝난 후에 y != 0 이 수행되어서 오류가 발생한다. 두 번째 표현식에서 y 가 0 이 아닐 때만, (x/y)을 실행하도록 y != 0 이 가디언(gardian) 역할을 수행한다고 말할 수 있다. 3.9 디버깅(Debugging) 오류가 발생했을 때, 파이썬 화면에 출력되는 역추적(traceback)에는 상당한 정보가 담겨있다. 하지만,특히 스택에 많은 프레임이 있는 경우 엄청나게 보여 엄두가 나지 않을 수도 있다. 대체로 가장 유용한 정보는 다음과 같은 것이 있다. 어떤 종류의 오류인가. 어디서 발생했는가. 구문 오류는 대체로 발견하기 쉽지만, 몇 가지는 애매하다. 파이썬의 경우 공백(space)과 탭(tab)의 차이가 눈에 보이지 않아 통상 무시하고 넘어가기 쉽기 때문에 공백 오류를 잡아내기가 까다롭다. R로 텍스트 데이터를 분석할 경우 눈에는 보이지 않지만 공백문자(White space) 문자가 여러가지 문제를 일으키는 경우가 많다. 특히 한글 인코딩과 결합될 경우 더욱 그렇다. 대체로 오류 메시지는 문제가 어디에서 발견되었는지를 지칭하지만, 실제 오류는 코드 앞에 종종 선행하는 줄에 있을 수 있다. 동일한 문제가 실행 오류에도 있다. 데시벨(decibels)로 신호 대비 잡음비를 계산한다고 가정하자. 공식은 \\(SNR_{db} = 10 \\log_{10} (P_{signal} / P_{noise})\\) 이다. R에서 아래와 같이 작성할 수 있다. signal_power &lt;- 9 noise_power &lt;- 10 ratio &lt;- signal_power / noise_power decibels &lt;- 10 * log10(ratio) print(decibels) signal_power 와 noise_power 를 부동 소수점값으로 표현되어 R코드에는 문제가 없지만, 파이썬 2로 실행하게 되면 다음과 같은 오류가 나온다. Traceback (most recent call last): File &quot;snr.py&quot;, line 5, in ? decibels = 10 * math.log10(ratio) OverflowError: math range error 오류 메지지가 5번째 줄에 있다고 지칭하지만, 잘못된 것은 없다. 실제 오류를 발견하기위해서,출력값이0인ratio값을print문을사용해서출력하는것이 도움이 된다. 문제는 4번째 줄에 있는데, 왜냐하면 두 정수를 나눌 때 내림 나눗 셈을 했기 때문입니다. 대체로, 오류 메시지는 문제가 어디에서 발견되었는지를 알려주지만, 종종 문제의 원인이 어디에서 발생했는지는 알려주지 않는다. 3.10 용어 정의 몸통 부문(body)**: 복합 문장 내부에 일련의 문장문 부울 표현식(boolean expression)**: 참(TRUE) 혹은 거짓(FALSE)의 값을 가지는 표현식 분기(branch)**: 조건문에서 대안 문장의 한 흐름 연쇄 조건문(chained conditional)**: 일련의 대안 분기가 있는 조건문 비교 연산자(comparison operator)**: 피연산자를 ==, !=, &gt;, &lt;, &gt;=, &lt;=로 비교하는 연산자 조건문(conditional statement)**: 조건에 따라 명령의 흐름을 제어하는 명령문 조건(condition)**: 조건문에서 어느 분기를 실행할지 결정하는 불 표현식 복합문(compound statement)**: 머리부문(head)과 몸통부문(body)으로 구성된 문장. 머리부문은 콜론(:)으로 끝나며, 몸통부문은 머리부문을 기준으로 들여쓰기로 구별된다. 가디언 패턴(guardian pattern)**: 단락(short circuit) 행동을 잘 이용하도록 논리 표현식을 구성하는 것 논리 연산자(logical operator)**: 불 표현식을 결합하는 연산자 중의 하나 (and, or, not) 중첩 조건문(nested conditional)**: 하나의 조건문이 다른 조건문 분기에 나타나는 조건문. 역추적(traceback)**: 예외 사항이 발생했을 때 실행되고, 출력되는 함수 리스트 단락(short circuit)**: 나머지 표현식 평가를 할 필요없이 최종 결과를 알기 때문에, 파이썬이 논리 표현식 평가를 진행하는 중간에 평가를 멈출 때. 3.11 연습문제 40시간 이상 일할 경우 시급을 1.5배 더 종업원에게 지급하는 봉급계산 프로그램을 다시 작성하세요. 시간을 입력하시오: 35.51 시급을 입력하시오: 7530 알바비: 263550 tryCatch를 사용하여 봉급계산 프로그램을 다시 작성하세요. 숫자가 아닌 입력값을 잘 처리해서 숫자 아닌 입력값이 들어왔을 때 메시지를 출력하고 정상적으로 프로그램을 종료하도록 합니다. 다음이 프로그램 출력 결과를 보여줍니다. 시간을 입력하시오: 35.51 시급을 입력하시오: 칠만원 오류, 다시 숫자를 입력하세요 시급을 입력하시오: 7만원 오류, 다시 숫자를 입력하세요 0.0과 1.0 사이의 점수를 출력하는 프로그램을 작성하세요. 만약 점수가 범위 밖이면 오류를 출력합니다. 만약 점수가 0.0과 1.0 사이라면, 다음의 테이블에 따라 등급을 출력합니다. 점수 등급 &gt;= 0.9 A &gt;= 0.8 B &gt;= 0.7 C &gt;= 0.6 D &lt; 0.6 F 점수를 입력하시오: 0.95 A 점수를 입력하시오: 만점 올바른 점수가 아닙니다. 점수를 입력하시오: 10.0 올바른 점수가 아닙니다. 점수를 입력하시오: 0.75 C 점수를 입력하시오: 0.5 F 상기 보이는 것처럼 반복적으로 프로그램을 실행해서 다양한 다른 입력값을 테스트해 보세요. "],
["r-func.html", "Chapter 4 함수 4.1 함수 호출 4.2 내장(Built-in) 함수 4.3 자료형(type) 변환 함수 4.4 난수(Random numbers) 4.5 수학 함수 4.6 신규 함수 추가 4.7 함수 정의와 사용법 4.8 실행 흐름 4.9 매개 변수(parameter)와 인수(argument) 4.10 결과있는 함수(fruitful function)와 빈 함수(void function) 4.11 왜 함수를 사용하는가? 4.12 디버깅 4.13 용어정의 {r-func-terminology} 4.14 연습문제 {r-func-ex}", " Chapter 4 함수 4.1 함수 호출 프로그래밍 문맥에서, 함수(function)는 연산을 수행하는 명명된 일련의 문장이다. 함수를 정의할 때, 이름과 일련의 문장을 명기한다. 나중에, 함수를 이름으로 “호출(call)”한다. 이미 함수 호출(function call)의 예제를 살펴봤다. typeof(32) ## [1] &quot;double&quot; 함수명은 typeof()이다. 괄호안의 표현식을 함수의 인자(argument)라고 한다. 인자는 함수 입력으로 함수 내부로 전달되는 값이나 변수이다. 앞선 typeof() 함수에 대한 결과는 인자의 자료형(type)이다. 통상 함수가 인자를 “받아” 결과를 “반환”한다. 결과를 결과값(return value)이라 부른다. 4.2 내장(Built-in) 함수 함수를 정의할 필요없이 사용할 수 있는 내장함수가 R에는 많다. 공통의 문제를 해결할 수 있는 함수를 R을 창시자(Ross Ihaka, Robert Gentleman)가 작성해서 누구나 사용할 수 있도록 R에 포함했다. max와 min 함수는 벡터 최소값과 최대값을 각각 계산해서 출력한다. max(c(1,2,3,4,5)) ## [1] 5 min(c(1,2,3,4,5)) ## [1] 1 max 함수는 벡터의 “가장 큰 값”, 상기 예제에서 “5”, min 함수는 “가장 작은 값”를, 상기 예제에서는 “1”을 출력한다. 매우 자주 사용되는 또 다른 내장 함수는 얼마나 많은 항목이 있는지 출력하는 length() 함수가 있다. 만약 length() 함수의 인수가 벡터이면 벡터에 있는 원소 갯수를 반환한다. length(c(1,2,3,4,5)) ## [1] 5 이들 함수는 벡터에만 국한된 것이 아니라, 뒷장에서 보듯이 다양한 자료형에 사용된다. 내장함수 이름은 사전에 점유된 예약어로 취급해야 한다. 예를 들어 “max”를 변수명으로 사용하지 말아야 한다. 4.3 자료형(type) 변환 함수 이런 자료형(type)에서 저런 자료형(type)으로 값을 변환하는 내장 함수가 R에는 있다. as.integer()함수는 임의의 값을 입력받아 변환이 가능하면 정수형으로 변환하고, 그렇지 않으면 오류가 발생한다. as.integer(&quot;32&quot;) [1] 32 as.integer(&quot;Hello&quot;) [1] NA Warning message: NAs introduced by coercion as.integer()는 부동 소수점 값을 정수로 변환할 수 있지만 소수점 이하를 절사한다. as.integer(&quot;3.99999&quot;) ## [1] 3 as.integer(&quot;-2.3&quot;) ## [1] -2 as.numeric()는 정수와 문자열을 부동 소수점으로 변환한다. as.numeric(32) ## [1] 32 as.numeric(&#39;3.14159&#39;) ## [1] 3.14159 as.characer()은 인자를 문자열로 변환한다. as.character(32) ## [1] &quot;32&quot; as.character(3.14159) ## [1] &quot;3.14159&quot; 파이썬을 비롯한 다른 언어에서 다뤄지지 않는 자료형이 요인(factor) 이다. 범주형 자료구조를 표현하는 일반적인 자료형으로 데이터 분석 및 모형 개발에 빈번하게 사용된다. as.factor()은 인자를 요인형으로 변환한다. as.factor(c(0, 1)) ## [1] 0 1 ## Levels: 0 1 as.factor(c(&quot;male&quot;, &quot;female&quot;)) ## [1] male female ## Levels: female male 4.4 난수(Random numbers) 동일한 입력을 받을 때, 대부분의 컴퓨터는 매번 동일한 출력값을 생성하기 때문에 결정적(deterministic)이라고 한다. 결정론이 대체로 좋은 것이다. 왜냐하면, 동일한 결과를 얻는데 동일한 계산을 기대하기 때문입니다. 하지만, 어떤 응용프로그램에 대해서 컴퓨터가 예측불가능하길 바란다. 게임이 좋은 예가 되고, 더 많은 예는 얼마든지 많다. 진실되게 프로그램을 비결정론적으로 만드는 것이 쉽지 않은 것으로 밝혀졌지만, 적어도 비결정론적인 것처럼 보이게 하는 방법은 있다. 의사 난수(pseudorandom numbers)를 생성하는 알고리즘을 사용하는 것이 방법 중의 하나다. 의사 난수는 이미 결정된 연산에 의해서 생성된다는 점에서 진정한 의미의 난수는 아니지만, 이렇게 생성된 숫자만 봐서는 진정한 난수와 구별하는 것은 불가능에 가깝다. R은 데이터분석을 위해 태어난 언어라고 할 만큼 기본 내장함수로 다양한 난수 생성기를 갖추고 있다. 물론 난수 생성기로 생성되는 숫자는 의사난수다. 이하 의사 난수 대신 “랜덤(random)”으로 간략히 부르기로 한다. runif() 함수는 0.0 과 1.0 사이 부동 소수점 난수를 반환한다. runif() 함수 내부에 min, max 인자를 지정하여 난수 최소, 최대값을 범위를 설정할 수 있다. 매번 runif() 함수를 호출할 때 마다, 이미 생성된 아주 긴 난수열에서 하나씩 하나씩 뽑아 쓰다. 사례로 다음 반복문을 실행하자. for(i in 1:10) { cat(runif(1),&quot;\\n&quot;) } ## 0.7051646 ## 0.5138941 ## 0.1363068 ## 0.2023108 ## 0.7920102 ## 0.8628118 ## 0.9243335 ## 0.761028 ## 0.5861618 ## 0.7717238 상기 프로그램은 0.0 에서 1.0 구간에서 10개 난수 리스트를 생성한다. 연습문제 여러분의 컴퓨터에 프로그램을 실행해서, 어떤 난수가 생성되는지 살펴보세요. 한번 이상 프로그램을 실행하여 보고, 어떤 난수가 생성되는지 다시 살펴보세요. runif() 함수는 난수를 다루는 많은 함수 중의 하나다. sample() 함수는 정수 난수 범위와 난수 갯수를 매개 변수를 입력받아 최저값(low)과 최고값(high) 사이 (최저값과, 최저값 모두 포함) 정수를 반환한다. sample(1:10, 5) ## [1] 10 3 4 6 5 sample(1:10, 5) 실행문은 1 ~ 10 사이 정수 10개 중에서 난수로 5개를 추출한다는 뜻이다. 무작위로 특정 열에서 하나의 요소를 뽑아내기 위해, sample()를 동일하게 사용한다. t &lt;- c(1,2,3,4,5) sample(t, 1) ## [1] 1 sample(t, 1) ## [1] 2 또한 runif() 모듈을 활용하여 정규분포, 지수분포, 감마분포 및 기타 연속형 분포에서 난수를 생성하는 함수도 제공된다. 4.5 수학 함수 R은 가장 친숙한 수학 함수를 제공하는 수학 모듈이 있다. 기본 수학 모듈이 내장함수로 기본 설치되어 있어서 별도 호출작업은 필요없다. 점 표기법(dot notation)이라고 불리는 표기법을 사용해서, 함수 중에서 한 함수에 접근하기 위해서 모듈/객체 이름과 함수 이름을 명시해서 파이썬에서 활용하기도 하지만, R에서는 필요없다. signal_power &lt;- 9 noise_power &lt;- 10 ratio &lt;- signal_power / noise_power decibels &lt;- 10 * log10(ratio) radians &lt;- 0.7 height &lt;- sin(radians) 첫 예제는 신호-대-소음비의 로그 밑이 10(log10()) 을 계산한다. 두 번째 예제는 라디안의 사인값을 찾는 것이다. 변수의 이름이 힌트를 주는데, sin()과 다른 삼각함수(cos(), tan() 등)는 라디안을 인자로 받는다. 도(degree)에서 라디안(radian)으로 변환하기 위해서 360으로 나누고 \\(2\\pi\\)를 곱한다. degrees &lt;- 45 radians &lt;- degrees / 360.0 * 2 * pi sin(radians) ## [1] 0.7071068 pi 표현식은 수학 모듈에서 pi 변수를 얻는데, \\(\\pi\\) 값과 비교하여 15 자리수까지 정확하고 근사적으로 수렴한다. 삼각함수를 배웠다면, 앞선 연산 결과를 2에 루트를 씌우고 2로 나누어 비교 검증한다. sqrt(2) / 2 ## [1] 0.7071068 4.6 신규 함수 추가 지금까지 R 설치 시 함께 설치되는 함수만 사용했지만 새로운 함수를 추가하는 것도 가능하다. 함수 정의(function definition)는 신규 함수명과 함수가 호출될 때 실행될 일련의 문장을 명세한다. 신규로 함수를 정의하면, 프로그램 실행 중에 반복해서 함수를 재사용할 수 있다. 다음에 예제가 있다. print_lyrics &lt;- function() { print(&quot;I&#39;m a lumberjack, and I&#39;m okay.&quot;) print(&quot;I sleep all night and I work all day.&quot;) } function는 “이것이 함수 정의다”를 표시하는 예약어다. 함수 이름은 print_lyrics()이다. 함수 이름을 명명 규칙은 변수명과 동일하다. 문자, 숫자, 그리고 몇몇 문장 부호는 사용할 수 있지만, 첫 문자가 숫자는 될 수 없다. 함수 이름으로 예약어를 사용할 수 없고, 함수 이름과 동일한 변수명은 피해야 한다. 함수명 뒤 빈 괄호는 이 함수가 어떠한 인자도 갖지 않는다는 것을 나타낸다. 나중에, 입력값으로 인자를 가지는 함수를 작성해 볼 것이다. 함수 정의 첫번째 줄을 머리 부문(헤더, header), 나머지 부문을 몸통 부문(바디, body)라고 부른다. 머리 부문은 ()으로 끝나고, 몸통 부문은 괄호로 감싸야 한다. 몸통 부문에는 제약 없이 문장을 작성할 수 있다. print()문의 문자열은 이중 인용부호로 감싼다. 단일 인용부호나, 이중 인용부호나 차이는 없다. 대부분의 경우 이중 인용부호를 사용하고, 이중 인용부호가 문자열에 나타나는 경우, 단일 인용부호를 사용하여 이중 인용부호가 출력되게 감싼다. 만약 함수 정의를 인터렉티브 모드에서 타이핑을 하면, 함수 정의가 끝나지 않았다는 것을 의미로 더하기 부호(+)가 출력된다. 함수 정의를 끝내기 위해서 빈 줄을 입력한다. (스크립트에서는 반듯이 필요한 것은 아니다.) 함수를 정의하게 되면 동일한 이름의 변수도 생성된다. print_lyrics() ## [1] &quot;I&#39;m a lumberjack, and I&#39;m okay.&quot; ## [1] &quot;I sleep all night and I work all day.&quot; class(print_lyrics) ## [1] &quot;function&quot; print_lyrics() 값은 ‘function’ 형을 가지는 함수 객체(function object)다. 신규 함수를 호출하는 구문은 내장 함수의 경우와 동일하다. print_lyrics() ## [1] &quot;I&#39;m a lumberjack, and I&#39;m okay.&quot; ## [1] &quot;I sleep all night and I work all day.&quot; 함수를 정의하면, 또 다른 함수 내부에서 사용이 가능하다. 예를 들어, 이전 후렴구를 반복하기 위해 repeat_lyrics() 함수를 작성할 수 있다. repeat_lyrics &lt;- function() { print_lyrics() print_lyrics() } 그리고 나서, repeat_lyrics() 함수를 호출한다. repeat_lyrics() ## [1] &quot;I&#39;m a lumberjack, and I&#39;m okay.&quot; ## [1] &quot;I sleep all night and I work all day.&quot; ## [1] &quot;I&#39;m a lumberjack, and I&#39;m okay.&quot; ## [1] &quot;I sleep all night and I work all day.&quot; 하지만, 이것이 실제 노래가 불려지는 것은 아니다. 4.7 함수 정의와 사용법 앞 절의 코드 조각을 모아서 작성한 전체 프로그램은 다음과 같다. print_lyrics &lt;- function() { print(&quot;I&#39;m a lumberjack, and I&#39;m okay.&quot;) print(&quot;I sleep all night and I work all day.&quot;) } repeat_lyrics &lt;- function() { print_lyrics() print_lyrics() } repeat_lyrics() 상기 프로그램에는 두개의 함수(print_lyrics(), repeat_lyrics())가 있다. 함수 정의는 다른 문장처럼 수행되지만, 함수 객체를 생성한다는 점에서 차이가 있다. 함수 내부 문장은 함수가 호출되기 전까지 수행되지 않고, 함수 정의는 출력값도 생성하지 않는다. 예상하듯이, 함수를 실행하기 전에 함수를 생성해야 한다. 다시 말해서, 처음으로 호출되기 전에 함수 정의가 실행되어야 한다. 연습문제 상기 프로그램의 마지막 줄을 최상단으로 옮겨서 함수 정의 전에 호출되도록 프로그램을 고쳐보세요. 프로그램을 실행서 오류 메시지를 확인하세요. 연습문제 함수 호출을 맨 마지막으로 옮기고, repeat_lyrics 함수 정의 뒤에 print_lyrics 함수를 옮기세요. 프로그램을 실행하게 되면 무슨 일이 발생하나요? 4.8 실행 흐름 처음으로 함수가 사용되기 전에 정의되었는지를 확인하기 위해서, 명령문 실행 순서를 파악해야 하는데 이를 실행 흐름(flow of execution)이라고 한다. 프로그램 실행은 항상 프로그램 첫 문장부터 시작한다. 명령문은 한번에 하나씩 위에서 아래로 실행된다. 함수 정의(definitions)가 프로그램 실행 순서를 바꾸지는 않는다. 하지만, 함수 내부의 문장은 함수가 호출될 때까지 실행이 되지 않는다는 것을 기억하자. 함수 호출은 프로그램 실행 흐름을 우회하는 것과 같다. 다음 문장으로 가기 전에, 실행 흐름은 함수 몸통 부문을 실행하고는 건너 뛰기를 시작한 지점으로 다시 돌아온다. 함수가 또 다른 함수를 호출한다는 것을 기억할 때까지는 매우 간단하게 들린다. 함수 중간에서 프로그램이 또 다른 함수의 문장을 수행할지도 모른다. 하지만, 새로운 함수를 실행하는 중간에 프로그램이 또 다른 함수를 실행할지도 모른다! 다행스럽게도, 파이썬은 프로그램 실행 위치를 정확히 추적한다. 그래서, 함수가 실행을 완료할 때마다, 프로그램을 함수를 호출해서 떠난 지점으로 정확히 되돌려 놓는다. 프로그램이 마지막에 도달했을 때, 프로그램은 종료한다. 이렇게 복잡한 이야기의 교훈은 무엇일까요? 프로그램을 읽을 때, 위에서부터 아래로 읽을 필요는 없다. 때때로, 실행 흐름을 따르는 것이 좀더 이치에 맞는다. 4.9 매개 변수(parameter)와 인수(argument) 지금까지 살펴본 몇몇 내장 함수는 인자를 요구한다. 예를 들어, sin() 함수를 호출할 때, 숫자를 인자로 넘겨야 한다. 어떤 함수는 2개 이상의 인수를 받는다. log() 는 숫자와 밑 2개의 인자가 필요하다. 인자는 함수 내부에서 매개 변수(parameters)로 불리는 변수로 대입된다. 하나의 인자를 받는 사용자 정의 함수(user-defined function)가 예제로 있다. print_twice &lt;- function(bruce){ cat(bruce, &quot;\\n&quot;) cat(bruce, &quot;\\n&quot;) } 사용자 정의 함수는 인자를 받아 매개변수 bruce에 대입한다. 함수가 호출될 때, 매개변수의 값(무엇이든 관계 없이)을 두번 출력합니다. 사용자 정의 함수는 출력 가능한 임의의 값에 작동한다. print_twice(&#39;Spam&#39;) ## Spam ## Spam print_twice(17) ## 17 ## 17 print_twice(pi) ## 3.141593 ## 3.141593 내장함수에 적용되는 동일한 구성 규칙이 사용자 정의 함수에도 적용되어서, print_twice() 함수 인자로 표현식 어떤 종류도 가능하다. print_twice(rep(&quot;spam&quot;,2)) ## spam spam ## spam spam print_twice(cos(pi)) ## -1 ## -1 함수가 호출되기 전에 인자에 대한 평가는 완료되어, 예제에서 rep(&quot;spam&quot;,2)과 cos(pi)은 단지 1회만 평가된다. 변수도 인자로 사용이 가능하다. michael &lt;- &quot;Eric, the half a bee.&quot; print_twice(michael) ## Eric, the half a bee. ## Eric, the half a bee. 인수자 넘기는 변수명(michael)은 매개 변수명(bruce)과 아무런 연관이 없다. 무슨 값이 호출된든지 호출하는 측과 상관이 없다. 여기 print_twice() 함수에서는 누구나 bruce라고 부르면 된다. 4.10 결과있는 함수(fruitful function)와 빈 함수(void function) 수학 함수와 같은 몇몇 함수는 결과를 만들어 낸다. 좀더 좋은 이름이 없어서, 결과를 만들어 내는 함수를 결과있는 함수(fruitful functions)라고 명명한다. print_twice()와 같이 액션을 수행하지만, 결과를 만들어 내지 않는 함수를 빈 함수(void functions)라고 부른다. 결과있는 함수를 호출할 때는 결과값을 가지고 뭔가를 하려고 한다. 예를 들어, 결과값을 변수에 대입하거나, 표현식의 일부로 사용할 수 있다. x &lt;- cos(radians) golden &lt;- (sqrt(5) + 1) / 2 인터랙티브 모드에서 함수를 호출할 때, R은 결과를 화면에 출력한다. sqrt(5) ## [1] 2.236068 하지만, 스크립트에서 결과있는 함수를 호출하고 변수에 결과값을 저장하지 않으면 반환되는 결과값은 안개속에 사라져간다! 이 스크립트는 5의 제곱근을 계산하지만, 변수에 결과값을 저장하거나, 화면에 출력하지 않아서 그다지 유용하지는 않다. 빈 함수(Void functions)는 화면에 출력하거나 무엇인가 다른 효과를 가지지만, 반환값이 없다. 빈 함수를 사용하여 결과에 변수를 대입하면, NULL로 불리는 특별한 값을 얻게 된다. result &lt;- print_twice(&#39;Bing&#39;) Bing Bing print(result) NULL NULL 값은 자신만의 특별한 값을 가지며, 문자열 ‘NULL’ 과는 같지 않다. 함수에서 결과를 반환하기 위해서, 함수 내부에 return()문을 사용한다. 예를 들어, 두 숫자를 더해서 결과를 반환하는 addtwo()라는 간단한 함수를 작성할 수 있다. addtwo &lt;- function(a, b){ added &lt;- a + b return(added) } x &lt;- addtwo(3, 5) cat(x) ## 8 상기 스크립트가 실행될 때 cat() 출력문은 “8”을 출력한다. 왜냐하면, 3과 5를 인수로 받는 addtwo() 함수가 호출되기 때문이다. 함수 내부에 매개 변수 a, b는 각각 3, 5이다. addtwo() 함수는 두 숫자 덧셈을 수행하고 added라는 로컬 변수에 저장하고, return()문을 사용해서 덧셈 결과를 반환하고,x 라는 변수에 대입해서 출력한다. R에서 명시적으로 return을 통해 밝히지 않더라도 함수에서 최종적으로 담고 있는 객체가 자동 반환되지만, return을 통해 명시적으로 하는 것이 추후 디버깅 등의 목적으로 더 유용하다. 4.11 왜 함수를 사용하는가? 프로그램을 함수로 나누는 고생을 할 가치가 있는지 명확하지 않을 수 있다. 다음에 여기 몇 가지 이유가 있다. 문장을 그룹으로 만들어 새로운 함수로 명명하는 것이 프로그램을 읽고, 이해하고, 디버그하기 좋게한다. 함수는 반복 코드를 제거해서 프로그램을 작고 콤팩트하게 만든다. 나중에 프로그램에 수정사항이 생기면, 단지 한 곳에서만 수정을 하면 된다. 긴 프로그램을 함수로 나누어 작성하는 것은 작은 부분에서 버그를 수정할 수 있게 하고, 이를 조합해서 전체적으로 동작하는 프로그램을 만들 수 있다. 잘 설계된 함수는 종종 많은 프로그램에서 유용하게 사용된다. 잘 설계된 프로그램을 작성하고 디버그를 해서 오류가 없이 만들게 되면, 나중에 재사용도 용이하다. 책의 나머지 부분에서 이 개념을 설명하는 함수 정의를 종종 사용한다. “리스트에서 가장 작은 값을 찾아내는 것”과 같이 아이디어를 적절하게 추상화하여 함수를 작성하는 것이 함수를 만들고 사용하는 기술의 일부가 된다. 나중에, 리스트에서 가장 작은 값을 찾아내는 코드를 보여 줄 것입니다. 리스트를 인수로 받아 가장 작은 값을 반환하는 min() 함수를 작성해서 여러분에게 보여드릴 것이다. 4.12 디버깅 텍스트 편집기로 스크립트를 작성한다면 공백과 탭으로 몇번씩 문제에 봉착했을 것입니다. 이런 문제를 피하는 가장 최선의 방식은 절대 탭을 사용하지 말고 공백(스페이스)를 사용하는 것이다. R을 인식하는 대부분의 텍스트 편집기는 디폴트로 이런 기능을 지원하지만, 몇몇 텍스트 편집기는 이런 기능을 지원하지 않아 탭과 공백 문제를 야기한다. 탭과 공백은 통상 눈에 보이지 않기 때문에 디버그를 어렵게 한다. 자동으로 들여쓰기를 해주는 편집기를 프로그램 작성 시 사용한다. 프로그램을 실행하기 전에 저장하는 것을 잊지 마세요. 몇몇 개발 환경은 자동저장 기능을 지원하지만 그렇지 않는 것도 있다. 이런 이유 때문에 텍스트 편집기에서 작성한 개발 프로그램과 실행운영하고 있는 프로그램이 같지 않을 수도 있다. 동일하고 잘못된 프로그램을 반복적으로 실행한다면, 디버깅은 오래 걸릴 수 있다. 작성하고 있는 코드와 실행하는 코드가 일치하는지 필히 확인하자. 확신을 하지 못한다면, 프로그램의 첫줄에 print('hello') 을 넣어서 실행해 보자. hello를 보지 못한다면, 작성하고 있는 프로그램과 실행하고 있는 프로그램은 다른 것이다. 4.13 용어정의 {r-func-terminology} 알고리즘(algorithm): 특정 범주의 문제를 해결하는 일반적인 프로세스 인자(argument): 함수가 호출될 때 함수에 제공되는 값. 이 값은 함수 내부에 상응하는 매개 변수에 대입된다. 몸통 부문(body): 함수 정의 내부에 일련의 문장 구성(composition): 좀더 큰 표현식의 일부분으로 표현식을 사용하거나, 좀더 큰 문장의 일부로서의 문장 결정론적(deterministic): 동일한 입력값이 주어지고 실행될 때마다 동일한 행동을 하는 프로그램에 관련된 것. 점 표기법(dot notation): 점과 함수명으로 모듈명을 명세함으로써 다른 모듈의 함수를 호출하는 구문. 실행 흐름(flow of execution): 프로그램 실행 동안 명령문이 실행되는 순서. 결과있는 함수(fruitful function): 반환값을 가지는 함수. 함수(function): 유용한 연산을 수행하는 이름을 가진 일련의 명령문. 함수는 인수를 가질 수도 갖지 않을 수도 있고, 결과값을 생성할 수도 생성하지 않을 수도 있다. 함수 호출(function call): 함수를 실행하는 명령문. 함수 이름과 인자 리스트로 구성된다. 함수 정의(function definition): 신규 함수를 정의하는 명령문으로 이름, 매개변수, 실행 명령문을 명세한다. 함수 객체(function object): 함수 정의로 생성되는 값. 함수명은 함수 객체를 참조하는 변수다. 머리 부문(header): 함수 정의의 첫번째 줄 가져오기 문(import statement): 모듈 파일을 읽어 모듈 개체를 생성하는 명령문 모듈 개체(module object): import문에 의해서 생성된 모듈에 정의된 코드와 데이터에 접근할 수 있는 값 매개 변수(parameter): 인자로 전달된 값을 참조하기 위해 함수 내부에 사용되는 이름 의사 난수(pseudorandom): 난수처럼 보이는 일련의 숫자와 관련되어 있지만, 결정론적 프로그램에 의해 생성된다. 반환 값(return value): 함수의 결과. 함수 호출이 표현식으로 사용된다면, 반환값은 표현식의 값이 된다. 빈 함수(void function): 반환값을 갖지 않는 함수 4.14 연습문제 {r-func-ex} R “function” 키워드의 목적은 무엇입니까? “다음의 코드는 정말 좋다”라는 의미를 가진 속어 함수 정의를 표현한다. 다음의 들여쓰기 코드 부문은 나중을 위해 저장되야 된다는 것을 표시한다. 2와 3 모두 사실 위 모두 거짓 다음 R 프로그램은 무엇을 출력할까요? fred &lt;- function(){ print(&quot;Zap&quot;) } jane &lt;- function(){ print(&quot;ABC&quot;) } jane() fred() jane() Zap ABC jane fred jane Zap ABC Zap ABC Zap jane ABC Zap ABC Zap Zap Zap 프로그램 작성 시 (hours와 rate)을 매개 변수로 갖는 함수 computepay()을 생성하여, 초과근무에 대해서는 50％ 초과 근무수당을 지급하는 봉급 계산 프로그램을 다시 작성하세요. 시간을 입력하시오: 45 시급을 입력하시오: 10 시급: 475 매개 변수로 점수를 받아 문자열로 등급을 반환하는 computegrade() 함수를 사용하여 앞장의 등급 프로그램을 다시 작성하세요. 점수 등급 &gt;= 0.9 A &gt;= 0.8 B &gt;= 0.7 C &gt;= 0.6 D &lt; 0.6 F 점수를 입력하시오: 0.95 A 점수를 입력하시오: 만점 올바른 점수가 아닙니다. 점수를 입력하시오: 10.0 올바른 점수가 아닙니다. 점수를 입력하시오: 0.75 C 점수를 입력하시오: 0.5 F 반복적으로 프로그램을 실행해서 다양한 다른 입력값을 테스트해 보세요. "],
["r-iter.html", "Chapter 5 반복(Iteration) 5.1 변수 갱신 5.2 while문 {r-iter-while} 5.3 무한 루프 {r-iter-infinite-loop} 5.4 무한 반복과 break {r-iter-infinite-loop-break} 5.5 continue로 반복 종료{r-iter-stop}", " Chapter 5 반복(Iteration) 5.1 변수 갱신 대입문의 흔한 패턴은 변수를 갱신하는 대입문이다. 변수의 새로운 값은 이전 값에 의존한다. x &lt;- x + 1 상기 예제는 “현재 값 x에 1을 더해서 x를 새로운 값으로 갱신한다.” 만약 존재하지 않는 변수를 갱신하면, 오류가 발생한다. 왜냐하면 x에 값을 대입하기 전에 R이 오른쪽을 먼저 평가하기 때문이다. x &lt;- x +1 Error: object &#39;x&#39; not found 변수를 갱신하기 전에 간단한 변수 대입으로 통상 먼저 초기화(initialize)한다. x &lt;- 0 x &lt;- x + 1 1을 더해서 변수를 갱신하는 것을 증가(increment)라고 하고, 1을 빼서 변수를 갱신하는 것을 감소(decrement)라고 한다. 5.2 while문 {r-iter-while} 종종 반복적인 작업을 자동화하기 위해서 컴퓨터를 사용한다. 오류 없이 동일하거나 비슷한 작업을 반복하는 일은 컴퓨터가 사람보다 잘한다. 반복이 매우 흔한 일이어서, R에서 반복 작업을 쉽게 하도록 몇가지 언어적 기능을 제공한다. R에서 반복의 한 형태가 while문이다. 다음은 5 에서부터 거꾸로 세어서 마지막에 “Blastoff(발사)!”를 출력하는 간단한 프로그램이다. n &lt;- 5 while(n &gt; 0) { print(n) n &lt;- n -1 } ## [1] 5 ## [1] 4 ## [1] 3 ## [1] 2 ## [1] 1 print(&quot;Blastoff(발사)!&quot;) ## [1] &quot;Blastoff(발사)!&quot; 마치 영어를 읽듯이 while을 읽어 내려갈 수 있다. n이 0 보다 큰 동안에 n의 값을 출력하고 n 값에서 1만큼 뺀다. 0 에 도달했을 때, while문을 빠져나가 Blastoff(발사)!“를 화면에 출력한다. 좀더 형식을 갖춰 정리하면, 다음이 while문에 대한 실행 흐름에 대한 정리다. 조건을 평가해서 참(TRUE) 혹은 거짓(FALSE)를 산출한다. 만약 조건이 거짓이면, while문을 빠져나가 다음 문장을 계속 실행한다. 만약 조건이 참이면, 몸통 부문의 문장을 실행하고 다시 처음 1번 단계로 돌아간다. 3번째 단계에서 처음으로 다시 돌아가는 반복을 하기 때문에 이런 종류의 흐름을 루프(loop)라고 부른다. 매번 루프 몸통 부문을 실행할 때마다, 이것을 반복(iteration)이라고 한다. 상기 루프에 대해서 “5번 반복했다”고 말한다. 즉, 루프 몸통 부문이 5번 수행되었다는 의미가 된다. 루프 몸통 부문은 필히 하나 혹은 그 이상의 변수값을 바꾸어서 종국에는 조건식이 거짓(FALSE)이 되어 루프가 종료되게 만들어야 한다. 매번 루프가 실행될 때마다 상태를 변경하고 언제 루프가 끝날지 제어하는 변수를 반복 변수(iteration variable)라고 한다. 만약 반복 변수가 없다면, 루프는 영원히 반복될 것이고, 결국 무한 루프(infinite loop)에 빠질 것이다. 5.3 무한 루프 {r-iter-infinite-loop} 프로그래머에게 무한한 즐거움의 원천은 아마도 “거품내고, 헹구고, 반복” 이렇게 적혀있는 샴프 사용법 문구가 무한루프라는 것을 알아차릴 때일 것이다. 왜냐하면, 얼마나 많이 루프를 실행해야 하는지 말해주는 반복 변수(iteration variable)가 없어서 무한 반복하기 때문입니다. 숫자를 꺼꾸로 세는 (countdown) 예제는 루프가 끝나는 것을 증명할 수 있다. 왜냐하면 n값이 유한하고, n이 매번 루프를 돌 때마다 작아져서 결국 0 에 도달할 것이기 때문이다. 다른 경우 반복 변수가 전혀 없어서 루프가 명백하게 무한 반복한다. 5.4 무한 반복과 break {r-iter-infinite-loop-break} 가끔 몸통 부문을 절반 진행할 때까지 루프를 종료해야하는 시점인지 확신하지 못한다. 이런 경우 의도적으로 무한 루프를 작성하고 break 문을 사용하여 루프를 빠져 나온다. 다음 루프는 명백하게 무한 루프(infinite loop)가 되는데 이유는 while문 논리 표현식이 단순히 논리 상수 참(TRUE)으로 되어 있기 때문이다. n &lt;- 10 while(TRUE) { print(n) n &lt;- n - 1 } print(&#39;Done!&#39;) 실수하여 상기 프로그램을 실행한다면, 폭주하는 R 프로세스를 어떻게 멈추는지 빨리 배우거나, 컴퓨터의 전원 버튼이 어디에 있는지 찾아야 할 것이다. 표현식 상수 값이 참(TRUE)이라는 사실로 루프 상단 논리 연산식이 항상 참 값이여서 프로그램이 영원히 혹은 배터리가 모두 소진될 때까지 실행된다. 이것이 역기능 무한 루프라는 것은 사실이지만, 유용한 루프를 작성하기 위해는 이 패턴을 여전히 이용할 것이다. 이를 위해서 루프 몸통 부문에 break문을 사용하여 루프를 빠져나가는 조건에 도달했을 때, 루프를 명시적으로 빠져나갈 수 있도록 주의깊게 코드를 추가해야 한다. 예를 들어, 사용자가 done을 입력하기 전까지 사용자로부터 입력값을 받는다고 가정해서 프로그램 코드를 다음과 같이 작성한다. while(TRUE) { line &lt;- readline(prompt = &#39;&gt; &#39;) if(line == &#39;done&#39;) { break } print(line) } 루프 조건이 항상 참(TRUE)이여서 break문이 호출될 때까지 루프는 반복적으로 실행된다. 매번 프로그램이 꺾쇠 괄호로 사용자에게 명령문을 받을 준비를 한다. 사용자가 done을 타이핑하면, break문이 실행되어 루프를 빠져나온다. 그렇지 않은 경우 프로그램은 사용자가 무엇을 입력하든 메아리처럼 입력한 것을 그대로 출력하고 다시 루프 처음으로 되돌아 간다. 다음 예제로 실행한 결과가 있다. &gt; hello there hello there &gt; finished finished &gt; done &gt; done Error: object &#39;done&#39; not found while 루프를 이와 같은 방식으로 작성하는 것이 흔한데 프로그램 상단에서 뿐만 아니라 루프 어디에서나 조건을 확인할 수 있고 피동적으로 “이벤트가 발생할 때까지 계속 실행” 대신에, 적극적으로 “이벤트가 생겼을 때 중지”로 멈춤 조건을 표현할 수 있다. 5.5 continue로 반복 종료{r-iter-stop} 때때로 루프를 반복하는 중간에서 현재 반복을 끝내고, 다음 반복으로 즉시 점프하여 이동하고 싶을 때가 있다. 현재 반복 루프 몸통 부분 전체를 끝내지 않고 다음 반복으로 건너뛰기 위해서 continue문을 사용한다. 사용자가 “done”을 입력할 때까지 입력값을 그대로 복사하여 출력하는 루프 예제가 있다. 하지만 파이썬 주석문처럼 해쉬(#)로 시작하는 줄은 출력하지 않느다. continue문이 추가된 새로운 프로그램을 샘플로 실행했다. 해쉬 기호(#)로 시작하는 줄을 제외하고 모든 줄을 출력한다. 왜냐하면, continue문이 실행될 때,현재 반복을 종료하고 while문 처음으로 돌아가서 다음 반복을 실행하게 되어서 print문을 건너뛴다. for문을 사용한 명확한 루프 때때로, 단어 리스트나, 파일의 줄, 숫자 리스트 같은 사물의 집합에 대해 루프를 반복할 때가 있다. 루프를 반복할 사물 리스트가 있을 때, for문을 사용해서 확정 루프(definite loop)를 구성한다. while문을 불확정 루프(indefinite loop)라고 하는데, 왜냐하면 어떤 조건이 거짓(False)가 될 때까지 루프가 단순히 계혹해서 돌기 때문이다. 하지만, for루프는 확정된 항목의 집합에 대해서 루프가 돌게 되어서 집합에 있는 항목만큼만 실행이 된다. for문이 있고, 루프 몸통 부문으로 구성된다는 점에서 for루프 구문은 while루프 구문과 비슷하다. 파이썬 용어로, 변수 friends는 3개의 문자열을 가지는 리스트고, for 루프는 리스트를 하나씩 하나씩 찾아서 리스트에 있는 3개 문자열 각각에 대해 출력을 실행하여 다음 결과를 얻게 된다. for 루프를 영어로 번역하는 것이 while문을 번역하는 것과 같이 직접적이지는 않다. 하지만, 만약 friends를 집합(set)으로 생각한다면 다음과 같다. friends라고 명명된 집합에서 friend 각각에 대해서 한번씩 for 루프 몸통 부문에 있는 문장을 실행하라. for 루프를 살펴보면, for와 in은 파이썬 예약어이고 friend와 friends는 변수이다. for friend in friends: print &#39;Happy New Year&#39;, friend 특히, friend는 for 루프의 반복 변수(iteration variable)다. 변수 friend는 루프가 매번 반복할 때마다 변하고, 언제 for 루프가 완료되는지 제어한다. 반복 변수는 friend 변수에 저장된 3개 문자열을 순차적으로 훑고 간다. 루프 패턴 종종 for문과 while문을 사용하여, 리스트 항목, 파일 콘텐츠를 훑어 자료에 있는 가장 큰 값이나 작은 값 같은 것을 찾는다. for나 while 루프는 일반적으로 다음과 같이 구축된다. 루프가 시작하기 전에 하나 혹은 그 이상의 변수를 초기화 루프 몸통부분에 각 항목에 대해 연산을 수행하고, 루프 몸통 부분의 변수 상태를 변경 루프가 완료되면 결과 변수의 상태 확인 루프 패턴의 개념과 작성을 시연하기 위해서 숫자 리스트를 사용한다. 계수(counting)와 합산 루프 예를 들어, 리스트의 항목을 세기 위해서 다음과 같이 for 루프를 작성한다. 루프가 시작하기 전에 변수 count를 0 으로 설정하고, 숫자 목록을 훑어 갈 for 루프를 작성한다. 반복(iteration) 변수는 itervar라고 하고, 루프에서 itervar을 사용되지 않지만, itervar는 루프를 제어하고 루프 몸통 부문 리스트의 각 값에 대해서 한번만 실행되게 한다. 루프 몸통 부문에 리스트의 각 값에 대해서 변수 count 값에 1을 더한다. 루프가 실행될 때, count 값은 “지금까지” 살펴본 값의 횟수가 된다. 루프가 종료되면, count 값은 총 항목 숫자가 된다. 총 숫자는 루프 맨마지막에 얻어진다. 루프를 구성해서, 루프가 끝났을 때 기대했던 바를 얻었다. 숫자 집합의 갯수를 세는 또 다른 비슷한 루프는 다음과 같다. 상기 루프에서, 반복 변수(iteration variable)가 사용되었다. 앞선 루프에서처럼 변수 count에 1을 단순히 더하는 대신에, 각 루프가 반복을 수행하는 동안 실제 숫자 (3, 41, 12, 등)를 작업중인 합계에 덧셈을 했다. 변수 total을 생각해보면, total은 “지금까지 값의 총계다.” 루프가 시작하기 전에 total은 어떤 값도 살펴본 적이 없어서 0 이다. 루프가 도는 중에는 total은 작업중인 총계가 된다. 루프의 마지막 단계에서 total은 리스트에 있는 모든 값의 총계가 된다. 루프가 실행됨에 따라, total은 각 요소의 합계로 누적된다. 이 방식으로 사용되는 변수를 누산기(accumulator)라고 한다. 계수(counting) 루프나 합산 루프는 특히 실무에서 유용하지는 않다. 왜냐하면 리스트에서 항목의 개수와 총계를 계산하는 len()과 sum()가 각각 내장 함수로 있기 때문이다. 최대값과 최소값 루프 리스트나 열(sequence)에서 가장 큰 값을 찾기 위해서, 다음과 같이 루프를 작성한다. 프로그램을 실행하면, 출력은 다음과 같다. 변수 largest는 “지금까지 본 가장 큰 수”로 생각할 수 있다. 루프 시작 전에 largest 값은 상수 None이다. None은 “빈(empty)” 변수를 표기하기 위해서 변수에 저장하는 특별한 상수 값이다. 루프 시작 전에 지금까지 본 가장 큰 수는 None이다. 왜냐하면 아직 어떤 값도 보지 않았기 때문이다. 루프가 실행되는 동안에, largest 값이 None이면, 첫 번째 본 값이 지금까지 본 가장 큰 값이 된다. 첫번째 반복에서 itervar는 3 이 되는데 largest 값이 None이여서 즉시, largest값을 3 으로 갱신한다. 첫번째 반복 후에 largest는 더 이상 None이 아니다. itervar &gt; largest인지를 확인하는 복합 논리 표현식의 두 번째 부분은 “지금까지 본” 값 보다 더 큰 값을 찾게 될 때 자동으로 동작한다. “심지어 더 큰” 값을 찾게 되면 변수 largest에 새로운 값으로 대체한다. largest가 3에서 41, 41에서 74로 변경되어 출력되어 나가는 것을 확인할 수 있다. 루프의 끝에서 모든 값을 훑어서 변수 largest는 리스트의 가장 큰 값을 담고 있다. 최소값을 계산하기 위해서는 코드가 매우 유사하지만 작은 변화가 있다. 변수 smallest는 루프 실행 전에, 중에, 완료 후에 “지금까지 본 가장 작은” 값이 된다. 루프 실행이 완료되면, smallest는 리스트의 최소 값을 담게 된다. 계수(counting)과 합산에서와 마찬가지로 파이썬 내장함수 max()와 min()은 이런 루프문 작성을 불필요하게 만든다. 다음은 파이썬 내장 min() 함수의 간략 버전이다. 가장 적은 코드로 작성한 함수 버전은 파이썬에 이미 내장된 min 함수와 동등하게 만들기 위해서 모든 print문을 삭제했다. 디버깅 좀더 큰 프로그램을 작성할 때, 좀더 많은 시간을 디버깅에 보내는 자신을 발견할 것이다. 좀더 많은 코드는 버그가 숨을 수 있는 좀더 많은 장소와 오류가 발생할 기회가 있다는 것을 의미한다. 디버깅 시간을 줄이는 한 방법은 &quot; 이분법에 따라 디버깅(debugging by bisection)&quot; 하는 것이다. 예를 들어, 프로그램에 100 줄이 있고 한번에 하나씩 확인한다면, 100 번 단계가 필요하다. 대신에 문제를 반으로 나눈다. 프로그램 정확히 중간이나, 중간부분에서 점검한다. print문이나, 검증 효과를 갖는 상응하는 대용물을 넣고 프로그램을 실행한다. 중간지점 점검 결과 잘못 되었다면 문제는 양분한 프로그램 앞부분에 틀림없이 있다. 만약 정확하다면, 문제는 프로그램 뒷부분에 있다. 이와 같은 방식으로 점검하게 되면, 검토 해야하는 코드의 줄수를 절반으로 계속 줄일 수 있다. 단계가 100 번 걸리는 것에 비해 6번 단계 후에 이론적으로 1 혹은 2 줄로 문제 코드의 범위를 좁힐 수 있다. 실무에서, “프로그램의 중간”이 무엇인지는 명확하지 않고, 확인하는 것도 가능하지 않다. 프로그램 코드 라인을 세서 정확히 가운데를 찾는 것은 의미가 없다. 대신에 프로그램 오류가 생길 수 있는 곳과 오류를 확인하기 쉬운 장소를 생각하세요. 점검 지점 앞뒤로 버그가 있을 곳과 동일하게 생각하는 곳을 중간지점으로 고르세요. 용어정의 [누산기(accumulator):] 더하거나 결과를 누적하기 위해 루프에서 사용되는 변수 [계수(counter):] 루프에서 어떤 것이 일어나는 횟수를 기록하는데 사용되는 변수. 카운터를 0 으로 초기화하고, 어떤 것의 “횟수”를 셀 때 카운터를 증가시킨다. [감소(decrement):] 변수 값을 감소하여 갱신 [초기화(initialize):] 갱신될 변수의 값을 초기 값으로 대입 [증가(increment):] 변수 값을 증가시켜 갱신 (통상 1씩) [무한 루프(infinite loop):] 종료 조건이 결코 만족되지 않거나 종료 조건이 없는 루프 [반복(iteration):] 재귀함수 호출이나 루프를 사용하여 명령문을 반복 실행 연습문제 사용자가 “done”을 입력할 때까지 반복적으로 숫자를 읽는 프로그램을 작성하세요. “done”이 입력되면, 총계, 갯수, 평균을 출력하세요. 만약 숫자가 아닌 다른 것을 입력하게되면, try와 except를 사용하여 사용자 실수를 탐지해서 오류 메시지를 출력하고 다음 숫자로 건너 뛰게 하세요. 위에서처럼 숫자 목록을 사용자로부터 입력받는 프로그램을 작성하세요. 평균값 대신에 숫자 목록 최대값과 최소값을 출력하세요. "]
]
